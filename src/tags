!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/darren@hiebert.com/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	4.0.3	//
A	merc.h	531;"	d
ACT_AGGRESSIVE	merc.h	573;"	d
ACT_BANKER	merc.h	591;"	d
ACT_CLERIC	merc.h	580;"	d
ACT_GAIN	merc.h	587;"	d
ACT_IS_HEALER	merc.h	586;"	d
ACT_IS_NPC	merc.h	570;"	d
ACT_MAGE	merc.h	581;"	d
ACT_NOALIGN	merc.h	584;"	d
ACT_NOPURGE	merc.h	585;"	d
ACT_NO_KILL	merc.h	589;"	d
ACT_PET	merc.h	576;"	d
ACT_PRACTICE	merc.h	578;"	d
ACT_SCAVENGER	merc.h	572;"	d
ACT_SENTINEL	merc.h	571;"	d
ACT_STAY_AREA	merc.h	574;"	d
ACT_THIEF	merc.h	582;"	d
ACT_TRAIN	merc.h	577;"	d
ACT_UNDEAD	merc.h	579;"	d
ACT_UPDATE_ALWAYS	merc.h	588;"	d
ACT_WARRIOR	merc.h	583;"	d
ACT_WIMPY	merc.h	575;"	d
AC_BASH	merc.h	845;"	d
AC_EXOTIC	merc.h	847;"	d
AC_PIERCE	merc.h	844;"	d
AC_SLASH	merc.h	846;"	d
AD	merc.h	2064;"	d
AD	recycle.h	62;"	d
AD	recycle.h	65;"	d
AEDIT	olc_act.c	/^AEDIT( aedit_age )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_builder )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_create )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_file )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_lvnum )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_name )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_reset )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_rlist )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_security )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_show )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_uvnum )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_vnum )$/;"	f
AEDIT	olc_act.c	42;"	d	file:
AFFECT_DATA	merc.h	/^typedef struct  affect_data             AFFECT_DATA;$/;"	t
AFF_BERSERK	merc.h	819;"	d
AFF_BLIND	merc.h	791;"	d
AFF_BLINK	merc.h	832;"	d
AFF_CALM	merc.h	815;"	d
AFF_CHARM	merc.h	811;"	d
AFF_CURSE	merc.h	802;"	d
AFF_DARK_VISION	merc.h	818;"	d
AFF_DETECT_EVIL	merc.h	793;"	d
AFF_DETECT_GOOD	merc.h	824;"	d
AFF_DETECT_HIDDEN	merc.h	796;"	d
AFF_DETECT_INVIS	merc.h	794;"	d
AFF_DETECT_MAGIC	merc.h	795;"	d
AFF_FAERIE_FIRE	merc.h	800;"	d
AFF_FLYING	merc.h	812;"	d
AFF_HASTE	merc.h	814;"	d
AFF_HIDE	merc.h	809;"	d
AFF_INFRARED	merc.h	801;"	d
AFF_INVISIBLE	merc.h	792;"	d
AFF_PARALYSIS	merc.h	806;"	d
AFF_PASS_DOOR	merc.h	813;"	d
AFF_PLAGUE	merc.h	816;"	d
AFF_POISON	merc.h	804;"	d
AFF_PROTECT_EVIL	merc.h	805;"	d
AFF_PROTECT_GOOD	merc.h	797;"	d
AFF_REGENERATION	merc.h	821;"	d
AFF_SANCTUARY	merc.h	798;"	d
AFF_SLEEP	merc.h	810;"	d
AFF_SLOW	merc.h	803;"	d
AFF_SNEAK	merc.h	807;"	d
AFF_SWIM	merc.h	820;"	d
AFF_WEAKEN	merc.h	817;"	d
AFF_WEB	merc.h	822;"	d
ANGEL	merc.h	154;"	d
APPLY_AC	merc.h	1055;"	d
APPLY_AGE	merc.h	1047;"	d
APPLY_ALIGN	merc.h	1063;"	d
APPLY_CLASS	merc.h	1046;"	d
APPLY_CON	merc.h	1044;"	d
APPLY_DAMROLL	merc.h	1057;"	d
APPLY_DEX	merc.h	1041;"	d
APPLY_EXP	merc.h	1054;"	d
APPLY_GOLD	merc.h	1053;"	d
APPLY_HEIGHT	merc.h	1048;"	d
APPLY_HIT	merc.h	1051;"	d
APPLY_HITROLL	merc.h	1056;"	d
APPLY_INT	merc.h	1042;"	d
APPLY_MANA	merc.h	1050;"	d
APPLY_MOVE	merc.h	1052;"	d
APPLY_NONE	merc.h	1039;"	d
APPLY_SAVING_BREATH	merc.h	1061;"	d
APPLY_SAVING_PARA	merc.h	1058;"	d
APPLY_SAVING_PETRI	merc.h	1060;"	d
APPLY_SAVING_ROD	merc.h	1059;"	d
APPLY_SAVING_SPELL	merc.h	1062;"	d
APPLY_SEX	merc.h	1045;"	d
APPLY_SPELL_AFFECT	merc.h	1065;"	d
APPLY_STR	merc.h	1040;"	d
APPLY_WEIGHT	merc.h	1049;"	d
APPLY_WIS	merc.h	1043;"	d
AREA_ADDED	merc.h	2399;"	d
AREA_CHANGED	merc.h	2398;"	d
AREA_DATA	merc.h	/^typedef struct  area_data               AREA_DATA;$/;"	t
AREA_LIST	merc.h	2044;"	d
AREA_LOADING	merc.h	2400;"	d
AREA_NONE	merc.h	2397;"	d
ASSIST_ALIGN	merc.h	630;"	d
ASSIST_ALL	merc.h	629;"	d
ASSIST_GUARD	merc.h	633;"	d
ASSIST_PLAYERS	merc.h	632;"	d
ASSIST_RACE	merc.h	631;"	d
ASSIST_VNUM	merc.h	634;"	d
AUCTION_DATA	merc.h	/^typedef struct  auction_data            AUCTION_DATA; $/;"	t
AUTHOR	olc.h	36;"	d
AVATAR	merc.h	155;"	d
B	merc.h	532;"	d
BAN_ALL	merc.h	174;"	d
BAN_DATA	merc.h	/^typedef struct  ban_data                BAN_DATA;$/;"	t
BAN_FILE	merc.h	1989;"	d
BAN_NEWBIES	merc.h	173;"	d
BAN_PERMANENT	merc.h	176;"	d
BAN_PERMIT	merc.h	175;"	d
BAN_PREFIX	merc.h	172;"	d
BAN_SUFFIX	merc.h	171;"	d
BD	recycle.h	44;"	d
BD	recycle.h	47;"	d
BOARD_DATA	board.h	/^typedef struct board_data BOARD_DATA;$/;"	t
BOARD_NOACCESS	board.c	95;"	d	file:
BOARD_NOTFOUND	board.c	96;"	d	file:
BOARD_NOTFOUND	board.h	33;"	d
BONUS_RETRY_COUNT	bonus_update.c	59;"	d	file:
BUFFER	buffer.h	/^typedef struct buffer_type BUFFER;$/;"	t
BUFFER_DEBUG	buffer.h	13;"	d
BUG_FILE	merc.h	2046;"	d
C	merc.h	533;"	d
CAN_WEAR	merc.h	1900;"	d
CD	merc.h	2058;"	d
CD	merc.h	2350;"	d
CD	recycle.h	74;"	d
CD	recycle.h	81;"	d
CH	comm.c	62;"	d	file:
CHANGES_FILE	merc.h	1988;"	d
CHAOS_FILE	merc.h	2051;"	d
CHAR_DATA	merc.h	/^typedef struct  char_data               CHAR_DATA;$/;"	t
CLAN_DATA	merc.h	/^typedef struct  clan_data               CLAN_DATA;$/;"	t
COMM_BRIEF	merc.h	1275;"	d
COMM_COMBINE	merc.h	1277;"	d
COMM_COMPACT	merc.h	1274;"	d
COMM_NOAUCTION	merc.h	1265;"	d
COMM_NOCHANNELS	merc.h	1284;"	d
COMM_NOCLAN	merc.h	1271;"	d
COMM_NOEMOTE	merc.h	1282;"	d
COMM_NOGOSSIP	merc.h	1266;"	d
COMM_NOINFO	merc.h	1269;"	d
COMM_NOMUSIC	merc.h	1268;"	d
COMM_NOQUOTE	merc.h	1267;"	d
COMM_NOTELL	merc.h	1283;"	d
COMM_NOWIZ	merc.h	1264;"	d
COMM_PROMPT	merc.h	1276;"	d
COMM_QUIET	merc.h	1263;"	d
COMM_SNOOP_PROOF	merc.h	1285;"	d
COMM_TELNET_GA	merc.h	1278;"	d
COND_DRUNK	merc.h	1196;"	d
COND_FULL	merc.h	1197;"	d
COND_THIRST	merc.h	1198;"	d
CONT_CLOSEABLE	merc.h	1071;"	d
CONT_CLOSED	merc.h	1073;"	d
CONT_LOCKED	merc.h	1074;"	d
CONT_PICKPROOF	merc.h	1072;"	d
CON_ANSI	merc.h	280;"	d
CON_BREAK_CONNECT	merc.h	273;"	d
CON_CONFIRM_NEW_NAME	merc.h	261;"	d
CON_CONFIRM_NEW_PASSWORD	merc.h	263;"	d
CON_COPYOVER_RECOVER	merc.h	281;"	d
CON_DEFAULT_CHOICE	merc.h	268;"	d
CON_GEN_GROUPS	merc.h	269;"	d
CON_GET_ALIGNMENT	merc.h	267;"	d
CON_GET_NAME	merc.h	259;"	d
CON_GET_NEW_CLASS	merc.h	266;"	d
CON_GET_NEW_PASSWORD	merc.h	262;"	d
CON_GET_NEW_RACE	merc.h	264;"	d
CON_GET_NEW_SEX	merc.h	265;"	d
CON_GET_OLD_PASSWORD	merc.h	260;"	d
CON_GET_STATS	merc.h	274;"	d
CON_NOTE_EXPIRE	merc.h	277;"	d
CON_NOTE_FINISH	merc.h	279;"	d
CON_NOTE_SUBJECT	merc.h	276;"	d
CON_NOTE_TEXT	merc.h	278;"	d
CON_NOTE_TO	merc.h	275;"	d
CON_PICK_WEAPON	merc.h	270;"	d
CON_PLAYING	merc.h	258;"	d
CON_READ_IMOTD	merc.h	271;"	d
CON_READ_MOTD	merc.h	272;"	d
COPYOVER_FILE	comm.c	64;"	d	file:
CREATOR	merc.h	148;"	d
CREDITS	olc.h	40;"	d
D	merc.h	534;"	d
DAM_ACID	merc.h	601;"	d
DAM_BASH	merc.h	595;"	d
DAM_COLD	merc.h	599;"	d
DAM_DISEASE	merc.h	607;"	d
DAM_DROWNING	merc.h	608;"	d
DAM_ENERGY	merc.h	605;"	d
DAM_FIRE	merc.h	598;"	d
DAM_HARM	merc.h	611;"	d
DAM_HOLY	merc.h	604;"	d
DAM_LIGHT	merc.h	609;"	d
DAM_LIGHTNING	merc.h	600;"	d
DAM_MENTAL	merc.h	606;"	d
DAM_NEGATIVE	merc.h	603;"	d
DAM_NONE	merc.h	594;"	d
DAM_OTHER	merc.h	610;"	d
DAM_PIERCE	merc.h	596;"	d
DAM_POISON	merc.h	602;"	d
DAM_SLASH	merc.h	597;"	d
DATE	olc.h	39;"	d
DAZE_STATE	merc.h	1893;"	d
DEBUG	comm.c	/^bool				DEBUG;				\/* game is in debug mode *\/$/;"	v
DEFAULT_BOARD	board.h	25;"	d
DEF_EXCLUDE	board.h	21;"	d
DEF_INCLUDE	board.h	20;"	d
DEF_NORMAL	board.h	19;"	d
DEITY	merc.h	150;"	d
DEMI	merc.h	153;"	d
DESCRIPTOR_DATA	merc.h	/^typedef struct  descriptor_data         DESCRIPTOR_DATA;$/;"	t
DICE_BONUS	merc.h	852;"	d
DICE_NUMBER	merc.h	850;"	d
DICE_TYPE	merc.h	851;"	d
DIR_DOWN	merc.h	1122;"	d
DIR_EAST	merc.h	1118;"	d
DIR_NORTH	merc.h	1117;"	d
DIR_SOUTH	merc.h	1119;"	d
DIR_UP	merc.h	1121;"	d
DIR_WEST	merc.h	1120;"	d
DISABLED_DATA	merc.h	/^typedef struct  disabled_data           DISABLED_DATA;$/;"	t
DISABLED_FILE	merc.h	1987;"	d
DO_FUN	merc.h	/^typedef void DO_FUN     args( ( CHAR_DATA *ch, char *argument ) );$/;"	t
E	merc.h	535;"	d
ED	olc.h	274;"	d
ED	olc.h	293;"	d
ED	recycle.h	56;"	d
ED	recycle.h	59;"	d
EDIT_AREA	olc.h	263;"	d
EDIT_MOB	olc.h	260;"	d
EDIT_OBJ	olc.h	261;"	d
EDIT_ROOM	olc.h	262;"	d
ED_AREA	olc.h	53;"	d
ED_MOBILE	olc.h	56;"	d
ED_OBJECT	olc.h	55;"	d
ED_ROOM	olc.h	54;"	d
EMEM_SIZE	buffer.c	41;"	d	file:
END_MARKER	interp.c	47;"	d	file:
EXE_FILE	comm.c	67;"	d	file:
EXIT_DATA	merc.h	/^typedef struct  exit_data               EXIT_DATA;$/;"	t
EXTRA_DESCR_DATA	merc.h	/^typedef struct  extra_descr_data        EXTRA_DESCR_DATA;$/;"	t
EX_CLOSED	merc.h	1131;"	d
EX_HIDDEN	merc.h	1135;"	d
EX_ISDOOR	merc.h	1130;"	d
EX_LOCKED	merc.h	1132;"	d
EX_PASSPROOF	merc.h	1134;"	d
EX_PICKPROOF	merc.h	1133;"	d
F	merc.h	536;"	d
FALSE	merc.h	49;"	d
FNDELAY	comm.c	551;"	d	file:
FORM_AMPHIBIAN	merc.h	737;"	d
FORM_ANIMAL	merc.h	717;"	d
FORM_BIPED	merc.h	724;"	d
FORM_BIRD	merc.h	733;"	d
FORM_BLOB	merc.h	730;"	d
FORM_CENTAUR	merc.h	725;"	d
FORM_COLD_BLOOD	merc.h	739;"	d
FORM_CONSTRUCT	merc.h	720;"	d
FORM_CRUSTACEAN	merc.h	728;"	d
FORM_DRAGON	merc.h	736;"	d
FORM_EDIBLE	merc.h	710;"	d
FORM_FISH	merc.h	738;"	d
FORM_INSECT	merc.h	726;"	d
FORM_INSTANT_DECAY	merc.h	713;"	d
FORM_INTANGIBLE	merc.h	722;"	d
FORM_MAGICAL	merc.h	712;"	d
FORM_MAMMAL	merc.h	732;"	d
FORM_MIST	merc.h	721;"	d
FORM_OTHER	merc.h	714;"	d
FORM_POISON	merc.h	711;"	d
FORM_REPTILE	merc.h	734;"	d
FORM_SENTIENT	merc.h	718;"	d
FORM_SNAKE	merc.h	735;"	d
FORM_SPIDER	merc.h	727;"	d
FORM_UNDEAD	merc.h	719;"	d
FORM_WORM	merc.h	729;"	d
G	merc.h	537;"	d
GATE_BUGGY	merc.h	986;"	d
GATE_GOWITH	merc.h	985;"	d
GATE_NOCURSE	merc.h	984;"	d
GATE_NORMAL_EXIT	merc.h	983;"	d
GATE_RANDOM	merc.h	987;"	d
GD	recycle.h	50;"	d
GD	recycle.h	53;"	d
GEN_DATA	merc.h	/^typedef struct  gen_data                GEN_DATA;$/;"	t
GET_AC	merc.h	1880;"	d
GET_AGE	merc.h	1872;"	d
GET_DAMROLL	merc.h	1885;"	d
GET_HITROLL	merc.h	1883;"	d
GOD	merc.h	151;"	d
GOD_DIR	merc.h	2041;"	d
H	merc.h	538;"	d
HELP_DATA	merc.h	/^typedef struct  help_data               HELP_DATA;$/;"	t
HERO	merc.h	156;"	d
I	merc.h	540;"	d
IDEA_FILE	merc.h	2047;"	d
IMMORTAL	merc.h	152;"	d
IMM_ACID	merc.h	657;"	d
IMM_BASH	merc.h	651;"	d
IMM_CHARM	merc.h	648;"	d
IMM_COLD	merc.h	655;"	d
IMM_DISEASE	merc.h	663;"	d
IMM_DROWNING	merc.h	664;"	d
IMM_ENERGY	merc.h	661;"	d
IMM_FIRE	merc.h	654;"	d
IMM_HOLY	merc.h	660;"	d
IMM_LIGHT	merc.h	665;"	d
IMM_LIGHTNING	merc.h	656;"	d
IMM_MAGIC	merc.h	649;"	d
IMM_MENTAL	merc.h	662;"	d
IMM_NEGATIVE	merc.h	659;"	d
IMM_PIERCE	merc.h	652;"	d
IMM_POISON	merc.h	658;"	d
IMM_SLASH	merc.h	653;"	d
IMM_SUMMON	merc.h	647;"	d
IMM_WEAPON	merc.h	650;"	d
IMPLEMENTOR	merc.h	147;"	d
INVALIDATE	merc.h	1849;"	d
IS_AFFECTED	merc.h	1870;"	d
IS_AFFECTED2	merc.h	1895;"	d
IS_AWAKE	merc.h	1879;"	d
IS_BUILDER	olc.h	252;"	d
IS_EVIL	merc.h	1876;"	d
IS_GOOD	merc.h	1875;"	d
IS_HERO	merc.h	1868;"	d
IS_IMMORTAL	merc.h	1867;"	d
IS_IMMUNE	merc.h	642;"	d
IS_NEUTRAL	merc.h	1877;"	d
IS_NORMAL	merc.h	641;"	d
IS_NPC	merc.h	1866;"	d
IS_OBJ_STAT	merc.h	1901;"	d
IS_OUTSIDE	merc.h	1888;"	d
IS_QUESTOR	merc.h	1860;"	d
IS_RESISTANT	merc.h	643;"	d
IS_SET	merc.h	1855;"	d
IS_SWITCHED	olc.h	250;"	d
IS_TRUSTED	merc.h	1869;"	d
IS_VALID	merc.h	1847;"	d
IS_VULNERABLE	merc.h	644;"	d
IS_WEAPON_STAT	merc.h	1902;"	d
ITEM_ANTI_EVIL	merc.h	967;"	d
ITEM_ANTI_GOOD	merc.h	966;"	d
ITEM_ANTI_NEUTRAL	merc.h	968;"	d
ITEM_ARMOR	merc.h	929;"	d
ITEM_BLESS	merc.h	965;"	d
ITEM_BOAT	merc.h	939;"	d
ITEM_BURN_PROOF	merc.h	976;"	d
ITEM_CLOTHING	merc.h	931;"	d
ITEM_CONTAINER	merc.h	934;"	d
ITEM_CORPSE_NPC	merc.h	940;"	d
ITEM_CORPSE_PC	merc.h	941;"	d
ITEM_DARK	merc.h	959;"	d
ITEM_DRINK_CON	merc.h	935;"	d
ITEM_EVIL	merc.h	961;"	d
ITEM_FOOD	merc.h	937;"	d
ITEM_FOUNTAIN	merc.h	942;"	d
ITEM_FURNITURE	merc.h	932;"	d
ITEM_GEM	merc.h	950;"	d
ITEM_GLOW	merc.h	957;"	d
ITEM_HOLD	merc.h	1008;"	d
ITEM_HUM	merc.h	958;"	d
ITEM_INVENTORY	merc.h	970;"	d
ITEM_INVIS	merc.h	962;"	d
ITEM_JEWELRY	merc.h	951;"	d
ITEM_JUKEBOX	merc.h	949;"	d
ITEM_KEY	merc.h	936;"	d
ITEM_LIGHT	merc.h	923;"	d
ITEM_LOCK	merc.h	960;"	d
ITEM_MAGIC	merc.h	963;"	d
ITEM_MAP	merc.h	945;"	d
ITEM_MELT_DROP	merc.h	975;"	d
ITEM_MONEY	merc.h	938;"	d
ITEM_NODROP	merc.h	964;"	d
ITEM_NOLOCATE	merc.h	977;"	d
ITEM_NOPURGE	merc.h	971;"	d
ITEM_NOREMOVE	merc.h	969;"	d
ITEM_NOSACRIFICE	merc.h	980;"	d
ITEM_NOUNCURSE	merc.h	978;"	d
ITEM_PILL	merc.h	943;"	d
ITEM_PORTAL	merc.h	948;"	d
ITEM_POTION	merc.h	930;"	d
ITEM_PROTECT	merc.h	944;"	d
ITEM_RARE	merc.h	979;"	d
ITEM_ROT_DEATH	merc.h	972;"	d
ITEM_SCROLL	merc.h	924;"	d
ITEM_STAFF	merc.h	926;"	d
ITEM_TAKE	merc.h	994;"	d
ITEM_TRASH	merc.h	933;"	d
ITEM_TREASURE	merc.h	928;"	d
ITEM_TWO_HANDS	merc.h	1009;"	d
ITEM_VIS_DEATH	merc.h	973;"	d
ITEM_WAND	merc.h	925;"	d
ITEM_WARP_STONE	merc.h	947;"	d
ITEM_WEAPON	merc.h	927;"	d
ITEM_WEAR_ABOUT	merc.h	1004;"	d
ITEM_WEAR_ARMS	merc.h	1002;"	d
ITEM_WEAR_BODY	merc.h	997;"	d
ITEM_WEAR_FEET	merc.h	1000;"	d
ITEM_WEAR_FINGER	merc.h	995;"	d
ITEM_WEAR_HANDS	merc.h	1001;"	d
ITEM_WEAR_HEAD	merc.h	998;"	d
ITEM_WEAR_LEGS	merc.h	999;"	d
ITEM_WEAR_NECK	merc.h	996;"	d
ITEM_WEAR_SHIELD	merc.h	1003;"	d
ITEM_WEAR_WAIST	merc.h	1005;"	d
ITEM_WEAR_WRIST	merc.h	1006;"	d
ITEM_WIELD	merc.h	1007;"	d
J	merc.h	541;"	d
K	merc.h	542;"	d
KEY	db.c	516;"	d	file:
KEY	db.c	519;"	d	file:
KEY	save.c	758;"	d	file:
KEY	save.c	761;"	d	file:
L	merc.h	543;"	d
LEVEL_HERO	merc.h	136;"	d
LEVEL_IMMORTAL	merc.h	137;"	d
LIQ_MAX	merc.h	1519;"	d
LIQ_WATER	merc.h	1518;"	d
LOG_ALWAYS	interp.c	54;"	d	file:
LOG_NEVER	interp.c	55;"	d	file:
LOG_NORMAL	interp.c	53;"	d	file:
LOWER	merc.h	1853;"	d
L_IMM	board.c	69;"	d	file:
M	merc.h	544;"	d
MAT_AMETHYST	merc.h	783;"	d
MAT_CLOTH	merc.h	781;"	d
MAT_CRYSTAL	merc.h	785;"	d
MAT_DIAMOND	merc.h	773;"	d
MAT_EMERALD	merc.h	775;"	d
MAT_GLASS	merc.h	784;"	d
MAT_GOLD	merc.h	776;"	d
MAT_IRON	merc.h	771;"	d
MAT_LEATHER	merc.h	780;"	d
MAT_PAPER	merc.h	782;"	d
MAT_PLATINUM	merc.h	779;"	d
MAT_RUBY	merc.h	774;"	d
MAT_SILVER	merc.h	777;"	d
MAT_TITANIUM	merc.h	778;"	d
MAT_WOOD	merc.h	772;"	d
MAX_ALIAS	merc.h	128;"	d
MAX_ATTACK_TYPE	merc.h	135;"	d
MAX_BOARD	board.h	23;"	d
MAX_CLAN	merc.h	133;"	d
MAX_CLAN_MEMBERS	merc.h	134;"	d
MAX_CLASS	merc.h	129;"	d
MAX_DAMAGE_MESSAGE	fight.c	36;"	d	file:
MAX_DIR	merc.h	2404;"	d
MAX_GLOBAL	music.h	40;"	d
MAX_GROUP	merc.h	126;"	d
MAX_GUILD	merc.h	391;"	d
MAX_INPUT_LENGTH	merc.h	113;"	d
MAX_IN_GROUP	merc.h	127;"	d
MAX_KEY_HASH	merc.h	111;"	d
MAX_LEVEL	merc.h	131;"	d
MAX_LINES	music.h	39;"	d
MAX_LINE_LENGTH	board.h	28;"	d
MAX_MEM_LIST	merc.h	116;"	d
MAX_MOB	olc.h	69;"	d
MAX_MOB_LEVEL	bonus_update.c	58;"	d	file:
MAX_NEST	save.c	43;"	d	file:
MAX_NOTE_TEXT	board.h	31;"	d
MAX_PC_RACE	merc.h	130;"	d
MAX_PERM_BLOCK	db.c	182;"	d	file:
MAX_QUOTES	merc.h	139;"	d
MAX_RANK	merc.h	132;"	d
MAX_SKILL	merc.h	125;"	d
MAX_SOCIALS	merc.h	124;"	d
MAX_SONGS	music.h	38;"	d
MAX_STATS	merc.h	392;"	d
MAX_STRING	db.c	181;"	d	file:
MAX_STRING_LENGTH	merc.h	112;"	d
MAX_TRADE	merc.h	372;"	d
MAX_WEAR	merc.h	1182;"	d
MEDIT	olc_act.c	/^MEDIT( medit_ac )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_act )          \/* Moved out of medit() due to naming conflicts -- Hugin *\/$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_affect )      \/* Moved out of medit() due to naming conflicts -- Hugin *\/$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_affect2 )      \/* Moved out of medit() due to naming conflicts -- Hugin *\/$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_align )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_create )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_damdice )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_damtype )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_desc )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_form )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_gold )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_hitdice )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_hitroll )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_imm )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_level )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_long )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_manadice )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_material )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_name )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_off )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_part )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_position )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_race )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_res )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_sex )          \/* Moved out of medit() due to naming conflicts -- Hugin *\/$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_shop )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_short )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_show )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_size )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_spec )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_vuln )$/;"	f
MEDIT	olc_act.c	41;"	d	file:
MID	merc.h	2059;"	d
MID	merc.h	2351;"	d
MOB_INDEX_DATA	merc.h	/^typedef struct  mob_index_data          MOB_INDEX_DATA;$/;"	t
MOB_VNUM_CITYGUARD	merc.h	524;"	d
MOB_VNUM_FIDO	merc.h	523;"	d
MOB_VNUM_VAMPIRE	merc.h	525;"	d
MOB_VNUM_ZOMBIE	merc.h	527;"	d
MR	interp.h	14;"	d
MSL	buffer.c	43;"	d	file:
MUSIC_FILE	merc.h	1990;"	d
N	merc.h	545;"	d
NOTE_DATA	merc.h	/^typedef struct  note_data               NOTE_DATA;$/;"	t
NOTE_DIR	board.h	17;"	d
NOTE_FILE	merc.h	2049;"	d
NO_FLAG	merc.h	2405;"	d
NUL	buffer.c	42;"	d	file:
NULL_FILE	merc.h	2042;"	d
O	merc.h	546;"	d
OBJ_DATA	merc.h	/^typedef struct  obj_data                OBJ_DATA;$/;"	t
OBJ_INDEX_DATA	merc.h	/^typedef struct  obj_index_data          OBJ_INDEX_DATA;$/;"	t
OBJ_VNUM_BLACK_ROSE	merc.h	910;"	d
OBJ_VNUM_BLANK_SCROLL	merc.h	906;"	d
OBJ_VNUM_BRAINS	merc.h	878;"	d
OBJ_VNUM_CORPSE_NPC	merc.h	871;"	d
OBJ_VNUM_CORPSE_PC	merc.h	872;"	d
OBJ_VNUM_CORSAGE	merc.h	914;"	d
OBJ_VNUM_DOZEN_ROSES	merc.h	915;"	d
OBJ_VNUM_DUMMY	merc.h	2390;"	d
OBJ_VNUM_EMPTY_VIAL	merc.h	907;"	d
OBJ_VNUM_FLAME_SWORD	merc.h	884;"	d
OBJ_VNUM_GUTS	merc.h	877;"	d
OBJ_VNUM_LIGHT_BALL	merc.h	881;"	d
OBJ_VNUM_MAP	merc.h	905;"	d
OBJ_VNUM_MONEY_ONE	merc.h	868;"	d
OBJ_VNUM_MONEY_SOME	merc.h	869;"	d
OBJ_VNUM_MUSHROOM	merc.h	880;"	d
OBJ_VNUM_PINK_ROSE	merc.h	913;"	d
OBJ_VNUM_PIT	merc.h	890;"	d
OBJ_VNUM_PORTAL	merc.h	887;"	d
OBJ_VNUM_RED_ROSE	merc.h	912;"	d
OBJ_VNUM_ROSE	merc.h	886;"	d
OBJ_VNUM_SCHOOL_AXE	merc.h	896;"	d
OBJ_VNUM_SCHOOL_BANNER	merc.h	904;"	d
OBJ_VNUM_SCHOOL_DAGGER	merc.h	893;"	d
OBJ_VNUM_SCHOOL_FLAIL	merc.h	898;"	d
OBJ_VNUM_SCHOOL_MACE	merc.h	892;"	d
OBJ_VNUM_SCHOOL_POLEARM	merc.h	900;"	d
OBJ_VNUM_SCHOOL_SHIELD	merc.h	903;"	d
OBJ_VNUM_SCHOOL_STAFF	merc.h	897;"	d
OBJ_VNUM_SCHOOL_SWORD	merc.h	894;"	d
OBJ_VNUM_SCHOOL_VEST	merc.h	902;"	d
OBJ_VNUM_SCHOOL_WHIP	merc.h	899;"	d
OBJ_VNUM_SEVERED_HEAD	merc.h	873;"	d
OBJ_VNUM_SLICED_ARM	merc.h	875;"	d
OBJ_VNUM_SLICED_LEG	merc.h	876;"	d
OBJ_VNUM_SPRING	merc.h	882;"	d
OBJ_VNUM_STEAK	merc.h	885;"	d
OBJ_VNUM_TORN_HEART	merc.h	874;"	d
OBJ_VNUM_WHITE_ROSE	merc.h	911;"	d
OD	merc.h	2060;"	d
OD	merc.h	2352;"	d
OD	recycle.h	68;"	d
OD	recycle.h	71;"	d
OEDIT	olc_act.c	/^OEDIT( oedit_addaffect )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_cost )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_create )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_delaffect )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_ed )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_extra )      \/* Moved out of oedit() due to naming conflicts -- Hugin *\/$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_level )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_long )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_material )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_name )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_short )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_show )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_type )      \/* Moved out of oedit() due to naming conflicts -- Hugin *\/$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value0 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value1 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value2 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value3 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value4 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_wear )      \/* Moved out of oedit() due to naming conflicts -- Hugin *\/$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_weight )$/;"	f
OEDIT	olc_act.c	40;"	d	file:
OFF_AREA_ATTACK	merc.h	614;"	d
OFF_BACKSTAB	merc.h	615;"	d
OFF_BASH	merc.h	616;"	d
OFF_BERSERK	merc.h	617;"	d
OFF_CIRCLE	merc.h	637;"	d
OFF_CRUSH	merc.h	628;"	d
OFF_DISARM	merc.h	618;"	d
OFF_DODGE	merc.h	619;"	d
OFF_FADE	merc.h	620;"	d
OFF_FAST	merc.h	621;"	d
OFF_KICK	merc.h	622;"	d
OFF_KICK_DIRT	merc.h	623;"	d
OFF_PARRY	merc.h	624;"	d
OFF_RESCUE	merc.h	625;"	d
OFF_TAIL	merc.h	626;"	d
OFF_TRIP	merc.h	627;"	d
OFF_WHIRL	merc.h	638;"	d
OID	merc.h	2061;"	d
OID	merc.h	2353;"	d
OLC_FUN	olc.h	/^typedef bool OLC_FUN            args( ( CHAR_DATA *ch, char *argument ) );$/;"	t
P	merc.h	547;"	d
PAGELEN	merc.h	114;"	d
PART_ARMS	merc.h	743;"	d
PART_BRAINS	merc.h	746;"	d
PART_CLAWS	merc.h	760;"	d
PART_EAR	merc.h	751;"	d
PART_EYE	merc.h	752;"	d
PART_EYESTALKS	merc.h	754;"	d
PART_FANGS	merc.h	761;"	d
PART_FEET	merc.h	749;"	d
PART_FINGERS	merc.h	750;"	d
PART_FINS	merc.h	756;"	d
PART_GUTS	merc.h	747;"	d
PART_HANDS	merc.h	748;"	d
PART_HEAD	merc.h	742;"	d
PART_HEART	merc.h	745;"	d
PART_HORNS	merc.h	762;"	d
PART_LEGS	merc.h	744;"	d
PART_LONG_TONGUE	merc.h	753;"	d
PART_SCALES	merc.h	763;"	d
PART_TAIL	merc.h	758;"	d
PART_TENTACLES	merc.h	755;"	d
PART_TUSKS	merc.h	764;"	d
PART_WINGS	merc.h	757;"	d
PC_DATA	merc.h	/^typedef struct  pc_data                 PC_DATA;$/;"	t
PD	recycle.h	75;"	d
PD	recycle.h	80;"	d
PERS	merc.h	1909;"	d
PLAYER_DIR	merc.h	2039;"	d
PLAYER_TEMP	merc.h	2040;"	d
PLR_AFK	merc.h	1253;"	d
PLR_AUTOASSIST	merc.h	1224;"	d
PLR_AUTODAMAGE	merc.h	1232;"	d
PLR_AUTOEXIT	merc.h	1225;"	d
PLR_AUTOGOLD	merc.h	1228;"	d
PLR_AUTOLOOT	merc.h	1226;"	d
PLR_AUTOSAC	merc.h	1227;"	d
PLR_AUTOSPLIT	merc.h	1229;"	d
PLR_BOUGHT_PET	merc.h	1221;"	d
PLR_BOUNTY_HUNTER	merc.h	1260;"	d
PLR_CANLOOT	merc.h	1239;"	d
PLR_COLOR	merc.h	1242;"	d
PLR_CONSENT	merc.h	1233;"	d
PLR_DENY	merc.h	1249;"	d
PLR_FREEZE	merc.h	1250;"	d
PLR_HOLYLIGHT	merc.h	1237;"	d
PLR_INCOGNITO	merc.h	1258;"	d
PLR_IS_NPC	merc.h	1220;"	d
PLR_KILLER	merc.h	1252;"	d
PLR_LOG	merc.h	1248;"	d
PLR_NOBOUNTY	merc.h	1245;"	d
PLR_NOFOLLOW	merc.h	1241;"	d
PLR_NOSUMMON	merc.h	1240;"	d
PLR_PERMIT	merc.h	1254;"	d
PLR_QUESTOR	merc.h	1256;"	d
PLR_REMORT	merc.h	1234;"	d
PLR_THIEF	merc.h	1251;"	d
PLR_WIZINVIS	merc.h	1238;"	d
POS_DEAD	merc.h	1205;"	d
POS_FIGHTING	merc.h	1212;"	d
POS_INCAP	merc.h	1207;"	d
POS_MORTAL	merc.h	1206;"	d
POS_RESTING	merc.h	1210;"	d
POS_SITTING	merc.h	1211;"	d
POS_SLEEPING	merc.h	1209;"	d
POS_STANDING	merc.h	1213;"	d
POS_STUNNED	merc.h	1208;"	d
PULSE_AREA	merc.h	145;"	d
PULSE_AUCTION	merc.h	159;"	d
PULSE_BONUS	merc.h	162;"	d
PULSE_MOBILE	merc.h	143;"	d
PULSE_MUSIC	merc.h	161;"	d
PULSE_PER_SECOND	merc.h	141;"	d
PULSE_TICK	merc.h	144;"	d
PULSE_VIOLENCE	merc.h	142;"	d
Q	merc.h	549;"	d
QUEST_ITEM1	quest.c	36;"	d	file:
QUEST_ITEM2	quest.c	37;"	d	file:
QUEST_ITEM3	quest.c	38;"	d	file:
QUEST_ITEM4	quest.c	39;"	d	file:
QUEST_ITEM5	quest.c	40;"	d	file:
QUEST_OBJQUEST1	quest.c	47;"	d	file:
QUEST_OBJQUEST2	quest.c	48;"	d	file:
QUEST_OBJQUEST3	quest.c	49;"	d	file:
QUEST_OBJQUEST4	quest.c	50;"	d	file:
QUEST_OBJQUEST5	quest.c	51;"	d	file:
R	merc.h	550;"	d
R0	interp.h	24;"	d
R1	interp.h	15;"	d
R2	interp.h	16;"	d
R3	interp.h	17;"	d
R4	interp.h	18;"	d
R5	interp.h	19;"	d
R6	interp.h	20;"	d
R7	interp.h	21;"	d
R8	interp.h	22;"	d
R9	interp.h	23;"	d
REDIT	olc_act.c	/^REDIT( redit_create )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_desc )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_down )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_east )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_ed )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_format )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_mlist )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_mreset )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_mshow )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_name )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_north )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_olist )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_oreset )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_oshow )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_show )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_south )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_up )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_west )$/;"	f
REDIT	olc_act.c	39;"	d	file:
REMOVE_BIT	merc.h	1857;"	d
RESET_DATA	merc.h	/^typedef struct  reset_data              RESET_DATA;$/;"	t
RES_ACID	merc.h	677;"	d
RES_BASH	merc.h	671;"	d
RES_CHARM	merc.h	668;"	d
RES_COLD	merc.h	675;"	d
RES_DISEASE	merc.h	683;"	d
RES_DROWNING	merc.h	684;"	d
RES_ENERGY	merc.h	681;"	d
RES_FIRE	merc.h	674;"	d
RES_HOLY	merc.h	680;"	d
RES_LIGHT	merc.h	685;"	d
RES_LIGHTNING	merc.h	676;"	d
RES_MAGIC	merc.h	669;"	d
RES_MENTAL	merc.h	682;"	d
RES_NEGATIVE	merc.h	679;"	d
RES_PIERCE	merc.h	672;"	d
RES_POISON	merc.h	678;"	d
RES_SLASH	merc.h	673;"	d
RES_WEAPON	merc.h	670;"	d
RID	merc.h	2062;"	d
RID	merc.h	2354;"	d
ROOM_BANK	merc.h	1110;"	d
ROOM_DARK	merc.h	1094;"	d
ROOM_GODS_ONLY	merc.h	1104;"	d
ROOM_HEROES_ONLY	merc.h	1105;"	d
ROOM_IMP_ONLY	merc.h	1103;"	d
ROOM_INDEX_DATA	merc.h	/^typedef struct  room_index_data         ROOM_INDEX_DATA;$/;"	t
ROOM_INDOORS	merc.h	1096;"	d
ROOM_LAW	merc.h	1107;"	d
ROOM_NEWBIES_ONLY	merc.h	1106;"	d
ROOM_NOTELEPORT	merc.h	1108;"	d
ROOM_NO_MOB	merc.h	1095;"	d
ROOM_NO_RECALL	merc.h	1102;"	d
ROOM_PET_SHOP	merc.h	1101;"	d
ROOM_PRIVATE	merc.h	1098;"	d
ROOM_SAFE	merc.h	1099;"	d
ROOM_SOLITARY	merc.h	1100;"	d
ROOM_UNDERGROUND	merc.h	1111;"	d
ROOM_VNUM_ALTAR	merc.h	1085;"	d
ROOM_VNUM_CHAT	merc.h	1083;"	d
ROOM_VNUM_JAIL	merc.h	1088;"	d
ROOM_VNUM_LIMBO	merc.h	1082;"	d
ROOM_VNUM_SCHOOL	merc.h	1086;"	d
ROOM_VNUM_TEMPLE	merc.h	1084;"	d
S	merc.h	551;"	d
SECT_AIR	merc.h	1150;"	d
SECT_CITY	merc.h	1142;"	d
SECT_DESERT	merc.h	1151;"	d
SECT_FIELD	merc.h	1143;"	d
SECT_FOREST	merc.h	1144;"	d
SECT_HILLS	merc.h	1145;"	d
SECT_INSIDE	merc.h	1141;"	d
SECT_MAX	merc.h	1154;"	d
SECT_MOUNTAIN	merc.h	1146;"	d
SECT_UNDERGROUND	merc.h	1153;"	d
SECT_UNUSED	merc.h	1149;"	d
SECT_WATER_NOSWIM	merc.h	1148;"	d
SECT_WATER_SWIM	merc.h	1147;"	d
SET_BIT	merc.h	1856;"	d
SEX_FEMALE	merc.h	841;"	d
SEX_MALE	merc.h	840;"	d
SEX_NEUTRAL	merc.h	839;"	d
SF	merc.h	2063;"	d
SF	merc.h	2355;"	d
SHOP_DATA	merc.h	/^typedef struct  shop_data               SHOP_DATA;$/;"	t
SHUTDOWN_FILE	merc.h	2050;"	d
SIZE_GIANT	merc.h	860;"	d
SIZE_HUGE	merc.h	859;"	d
SIZE_LARGE	merc.h	858;"	d
SIZE_MEDIUM	merc.h	857;"	d
SIZE_SMALL	merc.h	856;"	d
SIZE_TINY	merc.h	855;"	d
SKEY	db.c	527;"	d	file:
SKY_CLOUDLESS	merc.h	232;"	d
SKY_CLOUDY	merc.h	233;"	d
SKY_LIGHTNING	merc.h	235;"	d
SKY_RAINING	merc.h	234;"	d
SLOT	const.c	717;"	d	file:
SPEC_FUN	merc.h	/^typedef bool SPEC_FUN   args( ( CHAR_DATA *ch ) );$/;"	t
SPELL_FUN	merc.h	/^typedef void SPELL_FUN  args( ( int sn, int level, CHAR_DATA *ch, void$/;"	t
STAT_CON	merc.h	397;"	d
STAT_DEX	merc.h	396;"	d
STAT_INT	merc.h	394;"	d
STAT_STR	merc.h	393;"	d
STAT_WIS	merc.h	395;"	d
SUN_DARK	merc.h	227;"	d
SUN_LIGHT	merc.h	229;"	d
SUN_RISE	merc.h	228;"	d
SUN_SET	merc.h	230;"	d
SUPREME	merc.h	149;"	d
T	merc.h	552;"	d
TARGET_CHAR	merc.h	1724;"	d
TARGET_NONE	merc.h	1727;"	d
TARGET_OBJ	merc.h	1725;"	d
TARGET_ROOM	merc.h	1726;"	d
TAR_CHAR_DEFENSIVE	merc.h	1716;"	d
TAR_CHAR_OFFENSIVE	merc.h	1715;"	d
TAR_CHAR_OTHER	merc.h	1720;"	d
TAR_CHAR_SELF	merc.h	1717;"	d
TAR_IGNORE	merc.h	1714;"	d
TAR_OBJ_CHAR_DEF	merc.h	1722;"	d
TAR_OBJ_CHAR_OFF	merc.h	1721;"	d
TAR_OBJ_INV	merc.h	1718;"	d
TIME_INFO_DATA	merc.h	/^typedef struct  time_info_data          TIME_INFO_DATA;$/;"	t
TOGGLE_BIT	olc.h	257;"	d
TO_AFFECTS	merc.h	490;"	d
TO_AFFECTS2	merc.h	496;"	d
TO_ALL	merc.h	355;"	d
TO_CHAR	merc.h	354;"	d
TO_IMMUNE	merc.h	492;"	d
TO_NOTVICT	merc.h	352;"	d
TO_OBJECT	merc.h	491;"	d
TO_RESIST	merc.h	493;"	d
TO_ROOM	merc.h	351;"	d
TO_VICT	merc.h	353;"	d
TO_VULN	merc.h	494;"	d
TO_WEAPON	merc.h	495;"	d
TRUE	merc.h	53;"	d
TYPE_HIT	merc.h	1707;"	d
TYPE_UNDEFINED	merc.h	1706;"	d
TYPO_FILE	merc.h	2048;"	d
U	merc.h	553;"	d
UMAX	merc.h	1851;"	d
UMIN	merc.h	1850;"	d
UPPER	merc.h	1854;"	d
URANGE	merc.h	1852;"	d
V	merc.h	554;"	d
VALIDATE	merc.h	1848;"	d
VERSION	olc.h	35;"	d
VULN_ACID	merc.h	696;"	d
VULN_BASH	merc.h	690;"	d
VULN_COLD	merc.h	694;"	d
VULN_DISEASE	merc.h	702;"	d
VULN_DROWNING	merc.h	703;"	d
VULN_ENERGY	merc.h	700;"	d
VULN_FIRE	merc.h	693;"	d
VULN_HOLY	merc.h	699;"	d
VULN_IRON	merc.h	707;"	d
VULN_LIGHT	merc.h	704;"	d
VULN_LIGHTNING	merc.h	695;"	d
VULN_MAGIC	merc.h	688;"	d
VULN_MENTAL	merc.h	701;"	d
VULN_NEGATIVE	merc.h	698;"	d
VULN_PIERCE	merc.h	691;"	d
VULN_POISON	merc.h	697;"	d
VULN_SILVER	merc.h	706;"	d
VULN_SLASH	merc.h	692;"	d
VULN_WEAPON	merc.h	689;"	d
VULN_WOOD	merc.h	705;"	d
W	merc.h	555;"	d
WAIT_STATE	merc.h	1892;"	d
WEAPON_AXE	merc.h	1017;"	d
WEAPON_DAGGER	merc.h	1014;"	d
WEAPON_EXOTIC	merc.h	1012;"	d
WEAPON_FLAIL	merc.h	1018;"	d
WEAPON_FLAMING	merc.h	1023;"	d
WEAPON_FROST	merc.h	1024;"	d
WEAPON_MACE	merc.h	1016;"	d
WEAPON_POISON	merc.h	1031;"	d
WEAPON_POLEARM	merc.h	1020;"	d
WEAPON_SHARP	merc.h	1026;"	d
WEAPON_SHOCKING	merc.h	1030;"	d
WEAPON_SPEAR	merc.h	1015;"	d
WEAPON_SWORD	merc.h	1013;"	d
WEAPON_TWO_HANDS	merc.h	1028;"	d
WEAPON_VAMPIRIC	merc.h	1025;"	d
WEAPON_VORPAL	merc.h	1027;"	d
WEAPON_WHIP	merc.h	1019;"	d
WEAR_ABOUT	merc.h	1175;"	d
WEAR_ARMS	merc.h	1173;"	d
WEAR_BODY	merc.h	1168;"	d
WEAR_FEET	merc.h	1171;"	d
WEAR_FINGER_L	merc.h	1164;"	d
WEAR_FINGER_R	merc.h	1165;"	d
WEAR_HANDS	merc.h	1172;"	d
WEAR_HEAD	merc.h	1169;"	d
WEAR_HOLD	merc.h	1180;"	d
WEAR_LEGS	merc.h	1170;"	d
WEAR_LIGHT	merc.h	1163;"	d
WEAR_NECK_1	merc.h	1166;"	d
WEAR_NECK_2	merc.h	1167;"	d
WEAR_NONE	merc.h	1162;"	d
WEAR_SECOND_WIELD	merc.h	1181;"	d
WEAR_SHIELD	merc.h	1174;"	d
WEAR_WAIST	merc.h	1176;"	d
WEAR_WIELD	merc.h	1179;"	d
WEAR_WRIST_L	merc.h	1177;"	d
WEAR_WRIST_R	merc.h	1178;"	d
WEATHER_DATA	merc.h	/^typedef struct  weather_data            WEATHER_DATA;$/;"	t
WIZ_AFK	merc.h	1308;"	d
WIZ_DEATHS	merc.h	1293;"	d
WIZ_FLAGS	merc.h	1296;"	d
WIZ_LEVELS	merc.h	1299;"	d
WIZ_LINKS	merc.h	1292;"	d
WIZ_LOAD	merc.h	1304;"	d
WIZ_LOGINS	merc.h	1290;"	d
WIZ_MOBDEATHS	merc.h	1295;"	d
WIZ_NEWBIE	merc.h	1305;"	d
WIZ_ON	merc.h	1288;"	d
WIZ_PENALTIES	merc.h	1297;"	d
WIZ_PREFIX	merc.h	1306;"	d
WIZ_RESETS	merc.h	1294;"	d
WIZ_RESTORE	merc.h	1303;"	d
WIZ_SACCING	merc.h	1298;"	d
WIZ_SECURE	merc.h	1300;"	d
WIZ_SITES	merc.h	1291;"	d
WIZ_SNOOPS	merc.h	1302;"	d
WIZ_SPAM	merc.h	1307;"	d
WIZ_SWITCHES	merc.h	1301;"	d
WIZ_TICKS	merc.h	1289;"	d
X	merc.h	556;"	d
Y	merc.h	558;"	d
Z	merc.h	559;"	d
_SPECIAL_H	special.h	12;"	d
__buffer_new	buffer.c	/^BUFFER * __buffer_new (int min_size)$/;"	f
__buffer_strcat	buffer.c	/^void __buffer_strcat (BUFFER *buffer, const char *text)$/;"	f
_board_h	board.h	12;"	d
aa	merc.h	560;"	d
ac	merc.h	/^    sh_int              ac[4];$/;"	m	struct:mob_index_data
ac_type	bit.c	/^const struct flag_type ac_type[] =$/;"	v
acid_effect	effects.c	/^void acid_effect(void *vo, int level, int dam, int target)$/;"	f
act	comm.c	/^void act (const char *format, CHAR_DATA *ch, const void *arg1, const void *arg2,$/;"	f
act	merc.h	/^    long                act;$/;"	m	struct:char_data
act	merc.h	/^    long                act;$/;"	m	struct:mob_index_data
act	merc.h	/^    long        act;                    \/* act bits for the race *\/$/;"	m	struct:race_type
act_bit_name	handler.c	/^char *act_bit_name( int act_flags )$/;"	f
act_flags	bit.c	/^const struct flag_type act_flags[] =$/;"	v
act_new	comm.c	/^void act_new( const char *format, CHAR_DATA *ch, const void *arg1,$/;"	f
add_clan	clans.c	/^void add_clan( CLAN_DATA *Clan )$/;"	f
add_follower	act_comm.c	/^void add_follower( CHAR_DATA *ch, CHAR_DATA *master ) {$/;"	f
add_random_apply	quest.c	/^void add_random_apply( CHAR_DATA *ch, OBJ_DATA *obj ) {$/;"	f
add_reset	olc.c	/^void add_reset( ROOM_INDEX_DATA *room, RESET_DATA *pReset, int index )$/;"	f
aedit	olc.c	/^void aedit( CHAR_DATA *ch, char *argument )$/;"	f
aedit_table	olc.c	/^const struct olc_cmd_type aedit_table[] =$/;"	v
aff	merc.h	/^    long        aff;                    \/* aff bits for the race *\/$/;"	m	struct:race_type
aff2	merc.h	/^    long        aff2;                   \/* aff2 bits for the race *\/$/;"	m	struct:race_type
affect2_bit_name	handler.c	/^char *affect2_bit_name( int vector )$/;"	f
affect2_flags	bit.c	/^const struct flag_type affect2_flags[] =$/;"	v
affect_bit_name	handler.c	/^char *affect_bit_name( int vector )$/;"	f
affect_check	handler.c	/^void affect_check(CHAR_DATA *ch,int where,int vector)$/;"	f
affect_data	merc.h	/^struct  affect_data$/;"	s
affect_enchant	handler.c	/^void affect_enchant(OBJ_DATA *obj)$/;"	f
affect_find	handler.c	/^AFFECT_DATA  *affect_find(AFFECT_DATA *paf, int sn)$/;"	f
affect_flags	bit.c	/^const struct flag_type affect_flags[] =$/;"	v
affect_free	handler.c	/^AFFECT_DATA *           affect_free;$/;"	v
affect_join	handler.c	/^void affect_join( CHAR_DATA *ch, AFFECT_DATA *paf )$/;"	f
affect_loc_name	handler.c	/^char *affect_loc_name( int location )$/;"	f
affect_modify	handler.c	/^void affect_modify( CHAR_DATA *ch, AFFECT_DATA *paf, bool fAdd )$/;"	f
affect_remove	handler.c	/^void affect_remove( CHAR_DATA *ch, AFFECT_DATA *paf )$/;"	f
affect_remove_obj	handler.c	/^void affect_remove_obj( OBJ_DATA *obj, AFFECT_DATA *paf)$/;"	f
affect_strip	handler.c	/^void affect_strip( CHAR_DATA *ch, int sn )$/;"	f
affect_to_char	handler.c	/^void affect_to_char( CHAR_DATA *ch, AFFECT_DATA *paf )$/;"	f
affect_to_obj	handler.c	/^void affect_to_obj(OBJ_DATA *obj, AFFECT_DATA *paf)$/;"	f
affected	merc.h	/^    AFFECT_DATA *       affected;$/;"	m	struct:char_data
affected	merc.h	/^    AFFECT_DATA *       affected;$/;"	m	struct:obj_data
affected	merc.h	/^    AFFECT_DATA *       affected;$/;"	m	struct:obj_index_data
affected2_by	merc.h	/^    long                affected2_by;$/;"	m	struct:char_data
affected2_by	merc.h	/^    long                affected2_by;$/;"	m	struct:mob_index_data
affected_by	merc.h	/^    int                 affected_by;$/;"	m	struct:char_data
affected_by	merc.h	/^    long                affected_by;$/;"	m	struct:mob_index_data
age	merc.h	/^    sh_int              age;$/;"	m	struct:area_data
aggr_update	update.c	/^void aggr_update( void )$/;"	f
alias	merc.h	/^    char *              alias[MAX_ALIAS];$/;"	m	struct:pc_data
alias_sub	merc.h	/^    char *              alias_sub[MAX_ALIAS];$/;"	m	struct:pc_data
alignment	merc.h	/^    sh_int              alignment;$/;"	m	struct:char_data
alignment	merc.h	/^    sh_int              alignment;$/;"	m	struct:mob_index_data
alloc_perm	db.c	/^void *alloc_perm( int sMem )$/;"	f
ansi	merc.h	/^	bool			    ansi;$/;"	m	struct:descriptor_data
append_file	db.c	/^void append_file( CHAR_DATA *ch, char *file, char *str )$/;"	f
append_note	board.c	/^static void append_note (FILE *fp, NOTE_DATA *note)$/;"	f	file:
apply_ac	handler.c	/^int apply_ac( OBJ_DATA *obj, int iWear, int type )$/;"	f
apply_flags	bit.c	/^const struct flag_type apply_flags[] =$/;"	v
area	merc.h	/^    AREA_DATA *         area;           \/* OLC *\/$/;"	m	struct:mob_index_data
area	merc.h	/^    AREA_DATA *         area;           \/* OLC *\/$/;"	m	struct:obj_index_data
area	merc.h	/^   AREA_DATA           *area;$/;"	m	struct:room_index_data
area_data	merc.h	/^struct  area_data$/;"	s
area_first	db.c	/^AREA_DATA *             area_first;$/;"	v
area_flags	bit.c	/^const struct flag_type area_flags[] =$/;"	v
area_flags	merc.h	/^    int                 area_flags;     \/* OLC *\/$/;"	m	struct:area_data
area_free	mem.c	/^AREA_DATA               *       area_free;$/;"	v
area_last	db.c	/^AREA_DATA *             area_last;$/;"	v
area_update	db.c	/^void area_update( void )$/;"	f
arg1	merc.h	/^    sh_int              arg1;$/;"	m	struct:reset_data
arg2	merc.h	/^    sh_int              arg2;$/;"	m	struct:reset_data
arg3	merc.h	/^    sh_int              arg3;$/;"	m	struct:reset_data
args	merc.h	34;"	d
args	merc.h	36;"	d
armor	merc.h	/^    sh_int              armor[4];$/;"	m	struct:char_data
assign_area_vnum	db.c	/^void assign_area_vnum( int vnum )$/;"	f
attack_table	const.c	/^const   struct attack_type      attack_table    []              =$/;"	v
attack_type	merc.h	/^struct attack_type$/;"	s
attr_prime	merc.h	/^    sh_int      attr_prime;             \/* Prime attribute              *\/$/;"	m	struct:class_type
auction	db.c	/^AUCTION_DATA *          auction;$/;"	v
auction_data	merc.h	/^struct auction_data$/;"	s
auction_update	update.c	/^void auction_update( void )$/;"	f
auto_accept	merc.h	/^    bool                auto_accept;$/;"	m	struct:clan_data
away_message	merc.h	/^	char *				away_message;$/;"	m	struct:pc_data
bamfin	merc.h	/^    char *              bamfin;$/;"	m	struct:pc_data
bamfout	merc.h	/^    char *              bamfout;$/;"	m	struct:pc_data
ban_data	merc.h	/^struct  ban_data$/;"	s
ban_flags	merc.h	/^    sh_int      ban_flags;$/;"	m	struct:ban_data
ban_free	mem.c	/^BAN_DATA *ban_free;$/;"	v
ban_list	ban.c	/^BAN_DATA *ban_list;$/;"	v
ban_site	ban.c	/^void ban_site(CHAR_DATA *ch, char *argument, bool fPerm)$/;"	f
bank	merc.h	/^    long                bank;$/;"	m	struct:char_data
base_group	merc.h	/^    char *      base_group;             \/* base skills gained           *\/$/;"	m	struct:class_type
bb	merc.h	561;"	d
beats	merc.h	/^    sh_int      beats;                  \/* Waiting time after use       *\/$/;"	m	struct:skill_type
bet	merc.h	/^    long        bet;    \/* last bet or 0 if no bets *\/$/;"	m	struct:auction_data
bit	merc.h	/^    int  bit;$/;"	m	struct:flag_type
bitvector	merc.h	/^    int                 bitvector;$/;"	m	struct:affect_data
board	merc.h	/^    BOARD_DATA *        board;$/;"	m	struct:pc_data
board_data	board.h	/^struct board_data$/;"	s
board_lookup	board.c	/^int board_lookup (const char *name)$/;"	f
board_number	board.c	/^int board_number (const BOARD_DATA *board)$/;"	f
boards	board.c	/^BOARD_DATA boards[MAX_BOARD] =$/;"	v
bonusPoints	merc.h	/^	int 				bonusPoints;$/;"	m	struct:char_data
bonus_update	bonus_update.c	/^void bonus_update( void ) {$/;"	f
bool	merc.h	/^typedef int                             bool;$/;"	t
boot_db	db.c	/^void boot_db(  )$/;"	f
bounty	merc.h	/^    long                bounty;$/;"	m	struct:pc_data
bprintf	buffer.c	/^int bprintf (BUFFER *buffer, char *fmt, ...)$/;"	f
buffer	merc.h	/^    BUFFER *            buffer;$/;"	m	struct:pc_data
buffer_clear	buffer.c	/^void buffer_clear (BUFFER *buffer)$/;"	f
buffer_free	buffer.c	/^void buffer_free (BUFFER *buffer)$/;"	f
buffer_new	buffer.h	29;"	d
buffer_new	buffer.h	37;"	d
buffer_strcat	buffer.h	30;"	d
buffer_strcat	buffer.h	38;"	d
buffer_type	buffer.h	/^struct buffer_type$/;"	s
bug	db.c	/^void bug( const char *str, int param )$/;"	f
bug_buf	db.c	/^char                    bug_buf         [2*MAX_INPUT_LENGTH];$/;"	v
bugf	handler.c	/^void bugf( char *fmt, ...)$/;"	f
builders	merc.h	/^    char *              builders;       \/* OLC *\/ \/* Listing of *\/$/;"	m	struct:area_data
buy_type	merc.h	/^    sh_int      buy_type [MAX_TRADE];   \/* Item types shop will buy     *\/$/;"	m	struct:shop_data
buyer	merc.h	/^    CHAR_DATA   * buyer;        \/* pointer to the buyer *\/$/;"	m	struct:auction_data
by	act_comm.c	/^    char *by;$/;"	m	struct:quote_type
can_carry_n	handler.c	/^int can_carry_n( CHAR_DATA *ch )$/;"	f
can_carry_w	handler.c	/^int can_carry_w( CHAR_DATA *ch )$/;"	f
can_drop_obj	handler.c	/^bool can_drop_obj( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
can_loot	act_obj.c	/^bool can_loot(CHAR_DATA *ch, OBJ_DATA *obj)$/;"	f
can_see	handler.c	/^bool can_see( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
can_see_obj	handler.c	/^bool can_see_obj( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
can_see_room	handler.c	/^bool can_see_room( CHAR_DATA *ch, ROOM_INDEX_DATA *pRoomIndex )$/;"	f
capitalize	db.c	/^char *capitalize( const char *str )$/;"	f
carried_by	merc.h	/^    CHAR_DATA *         carried_by;$/;"	m	struct:obj_data
carry	merc.h	/^    sh_int      carry;$/;"	m	struct:str_app_type
carry_number	merc.h	/^    sh_int              carry_number;$/;"	m	struct:char_data
carry_weight	merc.h	/^    sh_int              carry_weight;$/;"	m	struct:char_data
carrying	merc.h	/^    OBJ_DATA *          carrying;$/;"	m	struct:char_data
cc	merc.h	562;"	d
ch_class	merc.h	/^    sh_int              ch_class;$/;"	m	struct:char_data
chance	quest.c	/^bool chance(int num)$/;"	f
change	merc.h	/^    int         change;$/;"	m	struct:weather_data
change_exit	olc_act.c	/^bool change_exit( CHAR_DATA *ch, char *argument, int door )$/;"	f
changed	board.h	/^        bool changed; \/* currently unused *\/$/;"	m	struct:board_data
channel_songs	music.c	/^int channel_songs[MAX_GLOBAL + 1];$/;"	v
chaos	comm.c	/^bool                chaos;              \/* Game in CHAOS!               *\/$/;"	v
chaos_kill	fight.c	/^void chaos_kill( CHAR_DATA *victim)$/;"	f
chaos_log	fight.c	/^void chaos_log( CHAR_DATA *ch, char *argument )$/;"	f
chaos_score	merc.h	/^    int                 chaos_score;$/;"	m	struct:pc_data
chaos_sort	act_info.c	/^void chaos_sort(CHAR_DATA *who_list[300], CHAR_DATA *ch, int length)$/;"	f
char_auto	merc.h	/^    char *    char_auto;$/;"	m	struct:social_type
char_data	merc.h	/^struct  char_data$/;"	s
char_found	merc.h	/^    char *    char_found;$/;"	m	struct:social_type
char_free	db.c	/^CHAR_DATA *             char_free;$/;"	v
char_from_room	handler.c	/^void char_from_room( CHAR_DATA *ch )$/;"	f
char_getImmRank	act_wiz.c	/^int char_getImmRank( CHAR_DATA *ch ) {$/;"	f
char_has_key	act_move.c	/^bool char_has_key( CHAR_DATA *ch, int key )$/;"	f
char_list	db.c	/^CHAR_DATA *             char_list;$/;"	v
char_no_arg	merc.h	/^    char *    char_no_arg;$/;"	m	struct:social_type
char_not_found	merc.h	/^    char *    char_not_found;$/;"	m	struct:social_type
char_setImmRank	act_wiz.c	/^void char_setImmRank( CHAR_DATA *ch, int newRank ) {$/;"	f
char_to_room	handler.c	/^void char_to_room( CHAR_DATA *ch, ROOM_INDEX_DATA *pRoomIndex )$/;"	f
char_update	update.c	/^void char_update( void )$/;"	f
character	merc.h	/^    CHAR_DATA *         character;$/;"	m	struct:descriptor_data
check_assist	fight.c	/^void check_assist(CHAR_DATA *ch,CHAR_DATA *victim)$/;"	f
check_ban	ban.c	/^bool check_ban(char *site,int type)$/;"	f
check_blind	act_info.c	/^bool check_blind( CHAR_DATA *ch )$/;"	f
check_blink	fight.c	/^bool check_blink( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_block	fight.c	/^bool check_block( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_disabled	interp.c	/^bool check_disabled( const struct cmd_type *command )$/;"	f
check_dispel	magic.c	/^bool check_dispel( int dis_level, CHAR_DATA *victim, int sn)$/;"	f
check_dodge	fight.c	/^bool check_dodge( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_immune	handler.c	/^int check_immune(CHAR_DATA *ch, int dam_type)$/;"	f
check_improve	skills.c	/^void check_improve( CHAR_DATA *ch, int sn, bool success, int multiplier ) {$/;"	f
check_killer	fight.c	/^void check_killer( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_parry	fight.c	/^bool check_parry( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_parse_name	comm.c	/^bool check_parse_name( char *name )$/;"	f
check_playing	comm.c	/^bool check_playing( DESCRIPTOR_DATA *d, char *name )$/;"	f
check_range	olc_act.c	/^bool check_range( int lower, int upper )$/;"	f
check_reconnect	comm.c	/^bool check_reconnect( DESCRIPTOR_DATA *d, char *name, bool fConn )$/;"	f
check_social	interp.c	/^bool check_social( CHAR_DATA *ch, char *command, char *argument )$/;"	f
check_web	act_move.c	/^bool check_web( CHAR_DATA *ch)$/;"	f
clan	merc.h	/^    sh_int              clan;$/;"	m	struct:mob_index_data
clan	merc.h	/^    sh_int              clan;$/;"	m	struct:pc_data
clan_accept	clans.c	/^sh_int clan_accept( CHAR_DATA *ch, char *clan )$/;"	f
clan_data	merc.h	/^struct clan_data$/;"	s
clan_first	db.c	/^CLAN_DATA *             clan_first;$/;"	v
clan_last	db.c	/^CLAN_DATA *             clan_last;$/;"	v
clan_leader	merc.h	/^    sh_int              clan_leader;$/;"	m	struct:pc_data
clan_lookup	clans.c	/^char * clan_lookup(int clan)$/;"	f
class_lookup	handler.c	/^int class_lookup (const char *name)$/;"	f
class_mult	merc.h	/^    sh_int      class_mult[MAX_CLASS];  \/* exp multiplier for class, * 100 *\/$/;"	m	struct:pc_race_type
class_table	const.c	/^const   struct  class_type      class_table     [MAX_CLASS]     =$/;"	v
class_type	merc.h	/^struct  class_type$/;"	s
classes	merc.h	/^    bool                classes[MAX_CLASS];$/;"	m	struct:clan_data
clear_char	db.c	/^void clear_char( CHAR_DATA *ch ) {$/;"	f
clone_mobile	db.c	/^void clone_mobile(CHAR_DATA *parent, CHAR_DATA *clone)$/;"	f
clone_object	db.c	/^void clone_object(OBJ_DATA *parent, OBJ_DATA *clone)$/;"	f
close_hour	merc.h	/^    sh_int      close_hour;             \/* First closing hour           *\/$/;"	m	struct:shop_data
close_socket	comm.c	/^void close_socket( DESCRIPTOR_DATA *dclose )$/;"	f
cmd_table	interp.c	/^const   struct  cmd_type        cmd_table       [] =$/;"	v
cmd_type	interp.h	/^struct  cmd_type$/;"	s
cold_effect	effects.c	/^void cold_effect(void *vo, int level, int dam, int target)$/;"	f
colors	act_comm.c	/^const char* colors[] = {$/;"	v
comm	merc.h	/^    long                comm;   \/* RT added to pad the vector *\/$/;"	m	struct:char_data
comm_bit_name	handler.c	/^char *comm_bit_name(int comm_flags)$/;"	f
command	merc.h	/^    char                command;$/;"	m	struct:reset_data
command	merc.h	/^    struct cmd_type const *command;  \/* pointer to the command struct *\/$/;"	m	struct:disabled_data
command	olc_act.c	/^    char *command;$/;"	m	struct:olc_help_type
comment	merc.h	/^    char *              comment;$/;"	m	struct:pc_data
con_app	const.c	/^const   struct  con_app_type    con_app         [26]            =$/;"	v
con_app_type	merc.h	/^struct  con_app_type$/;"	s
condition	merc.h	/^    sh_int              condition       [3];$/;"	m	struct:pc_data
confirm_delete	merc.h	/^    bool                confirm_delete;$/;"	m	struct:pc_data
confirm_pk	merc.h	/^    bool                confirm_pk;$/;"	m	struct:pc_data
connected	merc.h	/^    sh_int              connected;$/;"	m	struct:descriptor_data
const	merc.h	33;"	d
const	merc.h	58;"	d
container_flags	bit.c	/^const struct flag_type container_flags[] =$/;"	v
contains	merc.h	/^    OBJ_DATA *          contains;$/;"	m	struct:obj_data
contents	merc.h	/^   OBJ_DATA            *contents;$/;"	m	struct:room_index_data
control	comm.c	/^int port, control;$/;"	v
copyover_recover	comm.c	/^void copyover_recover( void )$/;"	f
cost	merc.h	/^    int                 cost;$/;"	m	struct:obj_data
cost	merc.h	/^    int                 cost;$/;"	m	struct:obj_index_data
cost_gold	merc.h	/^    long                cost_gold;$/;"	m	struct:clan_data
cost_xp	merc.h	/^    long                cost_xp;$/;"	m	struct:clan_data
count	merc.h	/^    sh_int              count;$/;"	m	struct:mob_index_data
count	merc.h	/^    sh_int              count;$/;"	m	struct:obj_index_data
count_obj_list	handler.c	/^int count_obj_list( OBJ_INDEX_DATA *pObjIndex, OBJ_DATA *list )$/;"	f
countdown	merc.h	/^    sh_int              countdown;$/;"	m	struct:char_data
create_mobile	db.c	/^CHAR_DATA *create_mobile( MOB_INDEX_DATA *pMobIndex )$/;"	f
create_money	handler.c	/^OBJ_DATA *create_money( int amount )$/;"	f
create_object	db.c	/^OBJ_DATA *create_object( OBJ_INDEX_DATA *pObjIndex, int level )$/;"	f
crypt	merc.h	2024;"	d
current_time	comm.c	/^time_t              current_time;       \/* time of this pulse *\/$/;"	v
d_next	comm.c	/^DESCRIPTOR_DATA *   d_next;             \/* Next descriptor in loop      *\/$/;"	v
dam_message	fight.c	/^void dam_message( CHAR_DATA *ch, CHAR_DATA *victim,int dam,int dt,bool immune )$/;"	f
dam_type	merc.h	/^    sh_int              dam_type;$/;"	m	struct:char_data
dam_type	merc.h	/^    sh_int              dam_type;$/;"	m	struct:mob_index_data
damage	fight.c	/^bool damage( CHAR_DATA *ch, CHAR_DATA *victim, int dam, int dt, int dam_type, bool show ) $/;"	f
damage	merc.h	/^    int         damage;                 \/* damage class *\/$/;"	m	struct:attack_type
damage	merc.h	/^    sh_int              damage[3];$/;"	m	struct:char_data
damage	merc.h	/^    sh_int              damage[3];$/;"	m	struct:mob_index_data
damroll	merc.h	/^    sh_int              damroll;$/;"	m	struct:char_data
damstatus	comm.c	/^char *damstatus(CHAR_DATA *ch)$/;"	f
data	buffer.h	/^        char *data; \/* The data *\/$/;"	m	struct:buffer_type
date	merc.h	/^    char *      date;$/;"	m	struct:note_data
date_stamp	merc.h	/^    time_t      date_stamp;$/;"	m	struct:note_data
day	merc.h	/^    int         day;$/;"	m	struct:time_info_data
day_name	act_info.c	/^char *  const   day_name        [] =$/;"	v
daze	merc.h	/^    sh_int              daze;$/;"	m	struct:char_data
dd	merc.h	563;"	d
death_cry	fight.c	/^void death_cry( CHAR_DATA *ch )$/;"	f
default_group	merc.h	/^    char *      default_group;          \/* default skills gained        *\/$/;"	m	struct:class_type
default_pos	merc.h	/^    sh_int              default_pos;$/;"	m	struct:char_data
default_pos	merc.h	/^    sh_int              default_pos;$/;"	m	struct:mob_index_data
defensive	merc.h	/^    sh_int      defensive;$/;"	m	struct:dex_app_type
del_last_line	string.c	/^char * del_last_line( char * string)$/;"	f
desc	merc.h	/^    DESCRIPTOR_DATA *   desc;$/;"	m	struct:char_data
desc	olc_act.c	/^    char *desc;$/;"	m	struct:olc_help_type
description	merc.h	/^    char *              description;$/;"	m	struct:char_data
description	merc.h	/^    char *              description;$/;"	m	struct:exit_data
description	merc.h	/^    char *              description;$/;"	m	struct:mob_index_data
description	merc.h	/^    char *              description;$/;"	m	struct:obj_data
description	merc.h	/^    char *              description;$/;"	m	struct:obj_index_data
description	merc.h	/^    char *description;          \/* What to see                      *\/$/;"	m	struct:extra_descr_data
description	merc.h	/^   char                *description;$/;"	m	struct:room_index_data
descriptor	merc.h	/^    sh_int              descriptor;$/;"	m	struct:descriptor_data
descriptor_data	merc.h	/^struct  descriptor_data$/;"	s
descriptor_free	comm.c	/^DESCRIPTOR_DATA *   descriptor_free;    \/* Free list for descriptors    *\/$/;"	v
descriptor_list	comm.c	/^DESCRIPTOR_DATA *   descriptor_list;    \/* All open descriptors         *\/$/;"	v
dex_app	const.c	/^const   struct  dex_app_type    dex_app         [26]            =$/;"	v
dex_app_type	merc.h	/^struct  dex_app_type$/;"	s
dice	db.c	/^int dice( int number, int size )$/;"	f
die_follower	act_comm.c	/^void die_follower( CHAR_DATA *ch ) {$/;"	f
dir_name	act_move.c	/^char *  const   dir_name        []              =$/;"	v
dir_text	act_info.c	/^char *dir_text[]={"North","East","South","West","Up","Down"};$/;"	v
disabled_by	merc.h	/^    char *disabled_by;               \/* name of disabler *\/$/;"	m	struct:disabled_data
disabled_data	merc.h	/^struct disabled_data$/;"	s
disabled_first	interp.c	/^DISABLED_DATA *disabled_first;$/;"	v
disarm	fight.c	/^void disarm( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
display_resets	olc.c	/^void display_resets( CHAR_DATA *ch )$/;"	f
do_accept	act_info.c	/^void do_accept( CHAR_DATA *ch, char *argument )$/;"	f
do_addapply	act_wiz.c	/^void do_addapply(CHAR_DATA *ch, char *argument)$/;"	f
do_aedit	olc.c	/^void do_aedit( CHAR_DATA *ch, char *argument )$/;"	f
do_afk	act_info.c	/^void do_afk(CHAR_DATA *ch, char *argument)$/;"	f
do_alia	alias.c	/^void do_alia(CHAR_DATA *ch, char *argument)$/;"	f
do_alias	alias.c	/^void do_alias(CHAR_DATA *ch, char *argument)$/;"	f
do_alist	olc.c	/^void do_alist( CHAR_DATA *ch, char *argument )$/;"	f
do_allow	ban.c	/^void do_allow( CHAR_DATA *ch, char *argument )                        $/;"	f
do_areas	db.c	/^void do_areas( CHAR_DATA *ch, char *argument )$/;"	f
do_areport	act_info.c	/^void do_areport( CHAR_DATA *ch, char *argument )$/;"	f
do_asave	olc_save.c	/^void do_asave( CHAR_DATA *ch, char *argument )$/;"	f
do_at	act_wiz.c	/^void do_at( CHAR_DATA *ch, char *argument )$/;"	f
do_auction	act_comm.c	/^void do_auction( CHAR_DATA *ch, char *argument ) {$/;"	f
do_autoassist	act_info.c	/^void do_autoassist(CHAR_DATA *ch, char *argument)$/;"	f
do_autodamage	act_info.c	/^void do_autodamage( CHAR_DATA *ch, char *argument)$/;"	f
do_autoexit	act_info.c	/^void do_autoexit(CHAR_DATA *ch, char *argument)$/;"	f
do_autogold	act_info.c	/^void do_autogold(CHAR_DATA *ch, char *argument)$/;"	f
do_autolist	act_info.c	/^void do_autolist(CHAR_DATA *ch, char *argument)$/;"	f
do_autoloot	act_info.c	/^void do_autoloot(CHAR_DATA *ch, char *argument)$/;"	f
do_autosac	act_info.c	/^void do_autosac(CHAR_DATA *ch, char *argument)$/;"	f
do_autosplit	act_info.c	/^void do_autosplit(CHAR_DATA *ch, char *argument)$/;"	f
do_backstab	fight.c	/^void do_backstab( CHAR_DATA *ch, char *argument )$/;"	f
do_balance	act_info.c	/^void do_balance( CHAR_DATA *ch, char *argument )$/;"	f
do_ban	ban.c	/^void do_ban(CHAR_DATA *ch, char *argument)$/;"	f
do_bash	fight.c	/^void do_bash( CHAR_DATA *ch, char *argument )$/;"	f
do_beacon	act_move.c	/^void do_beacon( CHAR_DATA *ch, char *argument )$/;"	f
do_berserk	fight.c	/^void do_berserk( CHAR_DATA *ch, char *argument)$/;"	f
do_board	board.c	/^void do_board (CHAR_DATA *ch, char *argument)$/;"	f
do_bonus	act_wiz.c	/^void do_bonus( CHAR_DATA *ch, char *argument )$/;"	f
do_bounty	act_info.c	/^void do_bounty( CHAR_DATA *ch, char *argument )$/;"	f
do_brandish	act_obj.c	/^void do_brandish( CHAR_DATA *ch, char *argument )$/;"	f
do_brew	act_obj.c	/^void do_brew ( CHAR_DATA *ch, char *argument )$/;"	f
do_brief	act_info.c	/^void do_brief(CHAR_DATA *ch, char *argument)$/;"	f
do_butcher	act_obj.c	/^void do_butcher(CHAR_DATA *ch, char *argument)$/;"	f
do_buy	act_obj.c	/^void do_buy( CHAR_DATA *ch, char *argument )$/;"	f
do_cast	magic.c	/^void do_cast( CHAR_DATA *ch, char *argument )$/;"	f
do_channels	act_comm.c	/^void do_channels( CHAR_DATA *ch, char *argument) {$/;"	f
do_chaos	act_wiz.c	/^void do_chaos( CHAR_DATA *ch, char *argument )$/;"	f
do_circle	fight.c	/^void do_circle( CHAR_DATA *ch, char *argument )$/;"	f
do_clan	clans.c	/^void do_clan(CHAR_DATA *ch, char *argument)$/;"	f
do_clan_recall	act_move.c	/^void do_clan_recall( CHAR_DATA *ch, char *argument )$/;"	f
do_clone	act_wiz.c	/^void do_clone(CHAR_DATA *ch, char *argument )$/;"	f
do_close	act_move.c	/^void do_close( CHAR_DATA *ch, char *argument )$/;"	f
do_color	comm.c	/^char *do_color(char *plaintext, bool color)$/;"	f
do_combine	act_info.c	/^void do_combine(CHAR_DATA *ch, char *argument)$/;"	f
do_commands	interp.c	/^void do_commands( CHAR_DATA *ch, char *argument )$/;"	f
do_comment	act_info.c	/^void do_comment( CHAR_DATA *ch, char *argument )$/;"	f
do_compact	act_info.c	/^void do_compact(CHAR_DATA *ch, char *argument)$/;"	f
do_compare	act_info.c	/^void do_compare( CHAR_DATA *ch, char *argument )$/;"	f
do_consent	marry.c	/^void do_consent( CHAR_DATA *ch )$/;"	f
do_consider	act_info.c	/^void do_consider( CHAR_DATA *ch, char *argument )$/;"	f
do_copyover	comm.c	/^void do_copyover (CHAR_DATA *ch, char * argument) {$/;"	f
do_credits	act_info.c	/^void do_credits( CHAR_DATA *ch, char *argument )$/;"	f
do_ctell	act_comm.c	/^void do_ctell( CHAR_DATA *ch, char *argument ) {$/;"	f
do_cwho	act_info.c	/^void do_cwho( CHAR_DATA *ch, char *argument )$/;"	f
do_debug	act_wiz.c	/^void do_debug( CHAR_DATA *ch, char *argument ) {$/;"	f
do_delet	act_comm.c	/^void do_delet( CHAR_DATA *ch, char *argument) {$/;"	f
do_delete	act_comm.c	/^void do_delete( CHAR_DATA *ch, char *argument) {$/;"	f
do_deny	act_wiz.c	/^void do_deny( CHAR_DATA *ch, char *argument )$/;"	f
do_deposit	act_info.c	/^void do_deposit( CHAR_DATA *ch, char *argument ) {$/;"	f
do_description	act_info.c	/^void do_description( CHAR_DATA *ch, char *argument )$/;"	f
do_dirt	fight.c	/^void do_dirt( CHAR_DATA *ch, char *argument )$/;"	f
do_disable	interp.c	/^void do_disable( CHAR_DATA *ch, char *argument )$/;"	f
do_disarm	fight.c	/^void do_disarm( CHAR_DATA *ch, char *argument )$/;"	f
do_disconnect	act_wiz.c	/^void do_disconnect( CHAR_DATA *ch, char *argument )$/;"	f
do_disown	act_info.c	/^void do_disown( CHAR_DATA *ch, char *argument )$/;"	f
do_divorce	marry.c	/^void do_divorce( CHAR_DATA *ch, char *argument)$/;"	f
do_down	act_move.c	/^void do_down( CHAR_DATA *ch, char *argument )$/;"	f
do_drink	act_obj.c	/^void do_drink( CHAR_DATA *ch, char *argument )$/;"	f
do_drop	act_obj.c	/^void do_drop( CHAR_DATA *ch, char *argument )$/;"	f
do_east	act_move.c	/^void do_east( CHAR_DATA *ch, char *argument )$/;"	f
do_eat	act_obj.c	/^void do_eat( CHAR_DATA *ch, char *argument )$/;"	f
do_echo	act_wiz.c	/^void do_echo( CHAR_DATA *ch, char *argument )$/;"	f
do_effects	act_info.c	/^void do_effects( CHAR_DATA *ch, char *argument)$/;"	f
do_email	act_info.c	/^void do_email( CHAR_DATA *ch, char *argument )$/;"	f
do_emote	act_comm.c	/^void do_emote( CHAR_DATA *ch, char *argument ) {$/;"	f
do_engrave	engrave.c	/^void do_engrave( CHAR_DATA *ch, char *argument )$/;"	f
do_enter	act_enter.c	/^void do_enter( CHAR_DATA *ch, char *argument)$/;"	f
do_envenom	act_obj.c	/^void do_envenom(CHAR_DATA *ch, char *argument)$/;"	f
do_equipment	act_info.c	/^void do_equipment( CHAR_DATA *ch, char *argument )$/;"	f
do_examine	act_info.c	/^void do_examine( CHAR_DATA *ch, char *argument )$/;"	f
do_exits	act_info.c	/^void do_exits( CHAR_DATA *ch, char *argument )$/;"	f
do_fill	act_obj.c	/^void do_fill( CHAR_DATA *ch, char *argument )$/;"	f
do_finger	act_info.c	/^void do_finger(CHAR_DATA *ch, char *argument)$/;"	f
do_flee	fight.c	/^void do_flee( CHAR_DATA *ch, char *argument )$/;"	f
do_follow	act_comm.c	/^void do_follow( CHAR_DATA *ch, char *argument ) {$/;"	f
do_force	act_wiz.c	/^void do_force( CHAR_DATA *ch, char *argument )$/;"	f
do_freeze	act_wiz.c	/^void do_freeze( CHAR_DATA *ch, char *argument )$/;"	f
do_fun	interp.h	/^    DO_FUN *            do_fun;$/;"	m	struct:cmd_type
do_fun	olc.h	/^    DO_FUN *            do_fun;$/;"	m	struct:editor_cmd_type
do_gain	skills.c	/^void do_gain( CHAR_DATA *ch, char *argument ) {$/;"	f
do_game	dice_games.c	/^void do_game( CHAR_DATA *ch, char *argument )$/;"	f
do_get	act_obj.c	/^void do_get( CHAR_DATA *ch, char *argument )$/;"	f
do_give	act_obj.c	/^void do_give( CHAR_DATA *ch, char *argument )$/;"	f
do_gmote	act_comm.c	/^void do_gmote( CHAR_DATA *ch, char *argument ) {$/;"	f
do_gocial	gocial.c	/^void do_gocial(CHAR_DATA *ch, char *argument)$/;"	f
do_gossip	act_comm.c	/^void do_gossip( CHAR_DATA *ch, char *argument ) {$/;"	f
do_goto	act_wiz.c	/^void do_goto( CHAR_DATA *ch, char *argument )$/;"	f
do_grab	act_wiz.c	/^void do_grab (CHAR_DATA *ch, char *argument)$/;"	f
do_grip	fight.c	/^void do_grip( CHAR_DATA *ch, char *argument )$/;"	f
do_group	act_comm.c	/^void do_group( CHAR_DATA *ch, char *argument ) {$/;"	f
do_groups	skills.c	/^void do_groups( CHAR_DATA *ch, char *argument ) {$/;"	f
do_gtell	act_comm.c	/^void do_gtell( CHAR_DATA *ch, char *argument ) {$/;"	f
do_heal	healer.c	/^void do_heal(CHAR_DATA *ch, char *argument)$/;"	f
do_help	act_info.c	/^void do_help( CHAR_DATA *ch, char *argument )$/;"	f
do_hide	act_move.c	/^void do_hide( CHAR_DATA *ch, char *argument )$/;"	f
do_holylight	act_wiz.c	/^void do_holylight( CHAR_DATA *ch, char *argument )$/;"	f
do_immtalk	act_comm.c	/^void do_immtalk( CHAR_DATA *ch, char *argument ) {$/;"	f
do_imotd	act_info.c	/^void do_imotd(CHAR_DATA *ch, char *argument)$/;"	f
do_incognito	act_wiz.c	/^void do_incognito( CHAR_DATA *ch, char *argument )$/;"	f
do_info	act_comm.c	/^void do_info( CHAR_DATA *ch, char *argument ) {$/;"	f
do_inventory	act_info.c	/^void do_inventory( CHAR_DATA *ch, char *argument )$/;"	f
do_invis	act_wiz.c	/^void do_invis( CHAR_DATA *ch, char *argument )$/;"	f
do_jail	act_wiz.c	/^void do_jail( CHAR_DATA *ch, char *argument )$/;"	f
do_kick	fight.c	/^void do_kick( CHAR_DATA *ch, char *argument )$/;"	f
do_kill	fight.c	/^void do_kill( CHAR_DATA *ch, char *argument )$/;"	f
do_list	act_obj.c	/^void do_list( CHAR_DATA *ch, char *argument )$/;"	f
do_load	act_wiz.c	/^void do_load(CHAR_DATA *ch, char *argument )$/;"	f
do_lock	act_move.c	/^void do_lock( CHAR_DATA *ch, char *argument )$/;"	f
do_log	act_wiz.c	/^void do_log( CHAR_DATA *ch, char *argument )$/;"	f
do_look	act_info.c	/^void do_look( CHAR_DATA *ch, char *argument )$/;"	f
do_lore	act_info.c	/^void do_lore( CHAR_DATA *ch, char *argument )$/;"	f
do_marry	marry.c	/^void do_marry( CHAR_DATA *ch, char *argument)$/;"	f
do_medit	olc.c	/^void do_medit( CHAR_DATA *ch, char *argument )$/;"	f
do_memory	db.c	/^void do_memory( CHAR_DATA *ch, char *argument )$/;"	f
do_message	act_comm.c	/^void do_message( CHAR_DATA *ch, char *argument ) {$/;"	f
do_mfind	act_wiz.c	/^void do_mfind( CHAR_DATA *ch, char *argument )$/;"	f
do_mload	act_wiz.c	/^void do_mload( CHAR_DATA *ch, char *argument )$/;"	f
do_motd	act_info.c	/^void do_motd(CHAR_DATA *ch, char *argument)$/;"	f
do_mset	act_wiz.c	/^void do_mset( CHAR_DATA *ch, char *argument )$/;"	f
do_mstat	act_wiz.c	/^void do_mstat( CHAR_DATA *ch, char *argument )$/;"	f
do_murde	fight.c	/^void do_murde( CHAR_DATA *ch, char *argument )$/;"	f
do_murder	fight.c	/^void do_murder( CHAR_DATA *ch, char *argument )$/;"	f
do_music	act_comm.c	/^void do_music( CHAR_DATA *ch, char *argument ) {$/;"	f
do_mwhere	act_wiz.c	/^void do_mwhere( CHAR_DATA *ch, char *argument )$/;"	f
do_ncatchup	board.c	/^static void do_ncatchup (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_new_changes	act_info.c	/^void do_new_changes( CHAR_DATA *ch, char *argument )$/;"	f
do_new_discon	act_wiz.c	/^void do_new_discon( CHAR_DATA *ch, char *argument )$/;"	f
do_newlock	act_wiz.c	/^void do_newlock( CHAR_DATA *ch, char *argument )$/;"	f
do_nlist	board.c	/^static void do_nlist (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_nobounty	act_info.c	/^void do_nobounty( CHAR_DATA *ch, char *argument )$/;"	f
do_nochannels	act_wiz.c	/^void do_nochannels( CHAR_DATA *ch, char *argument )$/;"	f
do_nocolor	act_info.c	/^void do_nocolor(CHAR_DATA *ch, char *argument)$/;"	f
do_noemote	act_wiz.c	/^void do_noemote( CHAR_DATA *ch, char *argument )$/;"	f
do_nofollow	act_info.c	/^void do_nofollow(CHAR_DATA *ch, char *argument)$/;"	f
do_noloot	act_info.c	/^void do_noloot(CHAR_DATA *ch, char *argument)$/;"	f
do_north	act_move.c	/^void do_north( CHAR_DATA *ch, char *argument )$/;"	f
do_nosummon	act_info.c	/^void do_nosummon(CHAR_DATA *ch, char *argument)$/;"	f
do_note	board.c	/^void do_note (CHAR_DATA *ch, char *argument)$/;"	f
do_notell	act_wiz.c	/^void do_notell( CHAR_DATA *ch, char *argument )$/;"	f
do_nread	board.c	/^static void do_nread (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_nremove	board.c	/^static void do_nremove (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_nwrite	board.c	/^static void do_nwrite (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_oedit	olc.c	/^void do_oedit( CHAR_DATA *ch, char *argument )$/;"	f
do_ofind	act_wiz.c	/^void do_ofind( CHAR_DATA *ch, char *argument )$/;"	f
do_olc	olc.c	/^void do_olc( CHAR_DATA *ch, char *argument )$/;"	f
do_oload	act_wiz.c	/^void do_oload( CHAR_DATA *ch, char *argument )$/;"	f
do_open	act_move.c	/^void do_open( CHAR_DATA *ch, char *argument )$/;"	f
do_order	act_comm.c	/^void do_order( CHAR_DATA *ch, char *argument ) {$/;"	f
do_oset	act_wiz.c	/^void do_oset( CHAR_DATA *ch, char *argument )$/;"	f
do_ostat	act_wiz.c	/^void do_ostat( CHAR_DATA *ch, char *argument )$/;"	f
do_outfit	act_wiz.c	/^void do_outfit ( CHAR_DATA *ch, char *argument )$/;"	f
do_owhere	act_wiz.c	/^void do_owhere(CHAR_DATA *ch, char *argument )$/;"	f
do_page	act_wiz.c	/^void do_page( CHAR_DATA *ch, char *argument ) {$/;"	f
do_pardon	act_wiz.c	/^void do_pardon( CHAR_DATA *ch, char *argument )$/;"	f
do_password	act_info.c	/^void do_password( CHAR_DATA *ch, char *argument )$/;"	f
do_peace	act_wiz.c	/^void do_peace( CHAR_DATA *ch, char *argument )$/;"	f
do_pecho	act_wiz.c	/^void do_pecho( CHAR_DATA *ch, char *argument )$/;"	f
do_permba	ban.c	/^void do_permba( CHAR_DATA *ch, char *argument )$/;"	f
do_permban	ban.c	/^void do_permban(CHAR_DATA *ch, char *argument)$/;"	f
do_permit	act_wiz.c	/^void do_permit( CHAR_DATA *ch, char *argument )$/;"	f
do_petition	act_info.c	/^void do_petition( CHAR_DATA *ch, char *argument )$/;"	f
do_pick	act_move.c	/^void do_pick( CHAR_DATA *ch, char *argument )$/;"	f
do_pk	act_info.c	/^void do_pk(CHAR_DATA *ch, char *argument)$/;"	f
do_play	music.c	/^void do_play(CHAR_DATA *ch, char *argument)$/;"	f
do_pmote	act_comm.c	/^void do_pmote( CHAR_DATA *ch, char *argument ) {$/;"	f
do_poofin	act_wiz.c	/^void do_poofin( CHAR_DATA *ch, char *argument )$/;"	f
do_poofout	act_wiz.c	/^void do_poofout( CHAR_DATA *ch, char *argument )$/;"	f
do_pour	act_obj.c	/^void do_pour (CHAR_DATA *ch, char *argument)$/;"	f
do_practice	act_info.c	/^void do_practice( CHAR_DATA *ch, char *argument ) {$/;"	f
do_prefi	act_wiz.c	/^void do_prefi (CHAR_DATA *ch, char *argument)$/;"	f
do_prefix	act_wiz.c	/^void do_prefix (CHAR_DATA *ch, char *argument)$/;"	f
do_promote	act_wiz.c	/^void do_promote( CHAR_DATA *ch, char *argument )$/;"	f
do_prompt	act_info.c	/^void do_prompt(CHAR_DATA *ch, char *argument)$/;"	f
do_protect	act_wiz.c	/^void do_protect( CHAR_DATA *ch, char *argument)$/;"	f
do_purchase	flowers.c	/^void do_purchase( CHAR_DATA *ch, char *argument )$/;"	f
do_purge	act_wiz.c	/^void do_purge( CHAR_DATA *ch, char *argument )$/;"	f
do_push	fight.c	/^void do_push( CHAR_DATA *ch, char *argument )$/;"	f
do_put	act_obj.c	/^void do_put( CHAR_DATA *ch, char *argument )$/;"	f
do_quaff	act_obj.c	/^void do_quaff( CHAR_DATA *ch, char *argument )$/;"	f
do_quest	quest.c	/^void do_quest(CHAR_DATA *ch, char *argument) {$/;"	f
do_qui	act_comm.c	/^void do_qui( CHAR_DATA *ch, char *argument ) {$/;"	f
do_quiet	act_comm.c	/^void do_quiet ( CHAR_DATA *ch, char * argument) {$/;"	f
do_quit	act_comm.c	/^void do_quit( CHAR_DATA *ch, char *argument ) {$/;"	f
do_quote	act_comm.c	/^void do_quote( CHAR_DATA *ch ) {   $/;"	f
do_quote_channel	act_comm.c	/^void do_quote_channel( CHAR_DATA *ch, char *argument ) {$/;"	f
do_read	act_info.c	/^void do_read (CHAR_DATA *ch, char *argument )$/;"	f
do_reboo	act_wiz.c	/^void do_reboo( CHAR_DATA *ch, char *argument )$/;"	f
do_recall	act_move.c	/^void do_recall( CHAR_DATA *ch, char *argument )$/;"	f
do_recho	act_wiz.c	/^void do_recho( CHAR_DATA *ch, char *argument )$/;"	f
do_recite	act_obj.c	/^void do_recite( CHAR_DATA *ch, char *argument )$/;"	f
do_redit	olc.c	/^void do_redit( CHAR_DATA *ch, char *argument )$/;"	f
do_remove	act_obj.c	/^void do_remove( CHAR_DATA *ch, char *argument )$/;"	f
do_renam	rename.c	/^void do_renam( CHAR_DATA *ch, char *argument )$/;"	f
do_rename	rename.c	/^void do_rename (CHAR_DATA* ch, char* argument)$/;"	f
do_reply	act_comm.c	/^void do_reply( CHAR_DATA *ch, char *argument ) {$/;"	f
do_repop	act_wiz.c	/^void do_repop( CHAR_DATA *ch, char *argument )$/;"	f
do_report	act_info.c	/^void do_report( CHAR_DATA *ch, char *argument )$/;"	f
do_rescue	fight.c	/^void do_rescue( CHAR_DATA *ch, char *argument )$/;"	f
do_resets	olc.c	/^void do_resets( CHAR_DATA *ch, char *argument )$/;"	f
do_rest	act_move.c	/^void do_rest( CHAR_DATA *ch, char *argument )$/;"	f
do_restore	act_wiz.c	/^void do_restore( CHAR_DATA *ch, char *argument )$/;"	f
do_return	act_wiz.c	/^void do_return( CHAR_DATA *ch, char *argument )$/;"	f
do_rlist	act_wiz.c	/^void do_rlist(CHAR_DATA *ch, char *argument)$/;"	f
do_rset	act_wiz.c	/^void do_rset( CHAR_DATA *ch, char *argument )$/;"	f
do_rstat	act_wiz.c	/^void do_rstat( CHAR_DATA *ch, char *argument )$/;"	f
do_rules	act_info.c	/^void do_rules(CHAR_DATA *ch, char *argument)$/;"	f
do_sacrifice	act_obj.c	/^void do_sacrifice( CHAR_DATA *ch, char *argument )$/;"	f
do_save	act_comm.c	/^void do_save( CHAR_DATA *ch, char *argument ) {$/;"	f
do_say	act_comm.c	/^void do_say( CHAR_DATA *ch, char *argument ) {$/;"	f
do_scan	act_info.c	/^void do_scan(CHAR_DATA *ch, char *argument)$/;"	f
do_score	act_info.c	/^void do_score( CHAR_DATA *ch, char *argument )$/;"	f
do_scribe	act_obj.c	/^void do_scribe ( CHAR_DATA *ch, char *argument )$/;"	f
do_scroll	act_info.c	/^void do_scroll(CHAR_DATA *ch, char *argument)$/;"	f
do_search	act_info.c	/^void do_search( CHAR_DATA *ch, char *argument )$/;"	f
do_sell	act_obj.c	/^void do_sell( CHAR_DATA *ch, char *argument )$/;"	f
do_sendinfo	act_comm.c	/^void do_sendinfo( CHAR_DATA *ch, char *argument ) {$/;"	f
do_set	act_wiz.c	/^void do_set( CHAR_DATA *ch, char *argument )$/;"	f
do_show	act_info.c	/^void do_show(CHAR_DATA *ch, char *argument)$/;"	f
do_shutdow	act_wiz.c	/^void do_shutdow( CHAR_DATA *ch, char *argument )$/;"	f
do_shutdown	act_wiz.c	/^void do_shutdown( CHAR_DATA *ch, char *argument )$/;"	f
do_sit	act_move.c	/^void do_sit (CHAR_DATA *ch, char *argument )$/;"	f
do_skills	skills.c	/^void do_skills( CHAR_DATA *ch, char *argument ) {$/;"	f
do_sla	fight.c	/^void do_sla( CHAR_DATA *ch, char *argument )$/;"	f
do_slay	fight.c	/^void do_slay( CHAR_DATA *ch, char *argument )$/;"	f
do_sleep	act_move.c	/^void do_sleep( CHAR_DATA *ch, char *argument )$/;"	f
do_slookup	act_wiz.c	/^void do_slookup( CHAR_DATA *ch, char *argument )$/;"	f
do_smote	act_wiz.c	/^void do_smote(CHAR_DATA *ch, char *argument )$/;"	f
do_sneak	act_move.c	/^void do_sneak( CHAR_DATA *ch, char *argument )$/;"	f
do_snoop	act_wiz.c	/^void do_snoop( CHAR_DATA *ch, char *argument )$/;"	f
do_socials	act_info.c	/^void do_socials(CHAR_DATA *ch, char *argument)$/;"	f
do_sockets	act_wiz.c	/^void do_sockets( CHAR_DATA *ch, char *argument )$/;"	f
do_south	act_move.c	/^void do_south( CHAR_DATA *ch, char *argument )$/;"	f
do_spells	skills.c	/^void do_spells( CHAR_DATA *ch, char *argument ) {$/;"	f
do_split	act_comm.c	/^void do_split( CHAR_DATA *ch, char *argument ) {$/;"	f
do_spousetalk	marry.c	/^void do_spousetalk( CHAR_DATA *ch, char *argument )$/;"	f
do_sset	act_wiz.c	/^void do_sset( CHAR_DATA *ch, char *argument )$/;"	f
do_stand	act_move.c	/^void do_stand( CHAR_DATA *ch, char *argument )$/;"	f
do_stat	act_wiz.c	/^void do_stat ( CHAR_DATA *ch, char *argument )$/;"	f
do_states	act_wiz.c	/^void do_states( CHAR_DATA *ch, char *argument )$/;"	f
do_status	act_wiz.c	/^void do_status( CHAR_DATA *ch, char *argument )$/;"	f
do_steal	act_obj.c	/^void do_steal( CHAR_DATA *ch, char *argument )$/;"	f
do_string	act_wiz.c	/^void do_string( CHAR_DATA *ch, char *argument )$/;"	f
do_switch	act_wiz.c	/^void do_switch( CHAR_DATA *ch, char *argument )$/;"	f
do_tell	act_comm.c	/^void do_tell( CHAR_DATA *ch, char *argument ) {$/;"	f
do_test	act_wiz.c	/^void do_test ( CHAR_DATA *ch, char *argument )$/;"	f
do_time	act_info.c	/^void do_time( CHAR_DATA *ch, char *argument )$/;"	f
do_title	act_info.c	/^void do_title( CHAR_DATA *ch, char *argument )$/;"	f
do_train	act_move.c	/^void do_train( CHAR_DATA *ch, char *argument )$/;"	f
do_transfer	act_wiz.c	/^void do_transfer( CHAR_DATA *ch, char *argument )$/;"	f
do_trip	fight.c	/^void do_trip( CHAR_DATA *ch, char *argument )$/;"	f
do_unalias	alias.c	/^void do_unalias(CHAR_DATA *ch, char *argument)$/;"	f
do_unlock	act_move.c	/^void do_unlock( CHAR_DATA *ch, char *argument )$/;"	f
do_up	act_move.c	/^void do_up( CHAR_DATA *ch, char *argument )$/;"	f
do_value	act_obj.c	/^void do_value( CHAR_DATA *ch, char *argument )$/;"	f
do_violate	act_wiz.c	/^void do_violate( CHAR_DATA *ch, char *argument )$/;"	f
do_visible	act_move.c	/^void do_visible( CHAR_DATA *ch, char *argument )$/;"	f
do_vnum	act_wiz.c	/^void do_vnum(CHAR_DATA *ch, char *argument)$/;"	f
do_wake	act_move.c	/^void do_wake( CHAR_DATA *ch, char *argument )$/;"	f
do_wear	act_obj.c	/^void do_wear( CHAR_DATA *ch, char *argument )$/;"	f
do_weather	act_info.c	/^void do_weather( CHAR_DATA *ch, char *argument )$/;"	f
do_west	act_move.c	/^void do_west( CHAR_DATA *ch, char *argument )$/;"	f
do_where	act_info.c	/^void do_where( CHAR_DATA *ch, char *argument ) {$/;"	f
do_whirlwind	fight.c	/^void do_whirlwind( CHAR_DATA *ch, char *argument )$/;"	f
do_who	act_info.c	/^void do_who( CHAR_DATA *ch, char *argument )$/;"	f
do_whoname	act_info.c	/^void do_whoname (CHAR_DATA *ch, char *argument)$/;"	f
do_wimpy	act_info.c	/^void do_wimpy( CHAR_DATA *ch, char *argument )$/;"	f
do_withdraw	act_info.c	/^void do_withdraw( CHAR_DATA *ch, char *argument ) {$/;"	f
do_wizhelp	interp.c	/^void do_wizhelp( CHAR_DATA *ch, char *argument )$/;"	f
do_wizlist	act_info.c	/^void do_wizlist(CHAR_DATA *ch, char *argument)$/;"	f
do_wizlock	act_wiz.c	/^void do_wizlock( CHAR_DATA *ch, char *argument )$/;"	f
do_wiznet	act_wiz.c	/^void do_wiznet( CHAR_DATA *ch, char *argument )$/;"	f
do_wizslap	act_wiz.c	/^void do_wizslap( CHAR_DATA *ch, char *argument )$/;"	f
do_worth	act_info.c	/^void do_worth( CHAR_DATA *ch, char *argument )$/;"	f
do_yell	act_comm.c	/^void do_yell( CHAR_DATA *ch, char *argument ) {$/;"	f
do_zap	act_obj.c	/^void do_zap( CHAR_DATA *ch, char *argument )$/;"	f
do_zecho	act_wiz.c	/^void do_zecho(CHAR_DATA *ch, char *argument)$/;"	f
door_resets	bit.c	/^const struct flag_type door_resets[] =$/;"	v
doparseprompt	comm.c	/^char *doparseprompt(CHAR_DATA *ch)$/;"	f
dragon	special.c	/^bool dragon( CHAR_DATA *ch, char *spell_name )$/;"	f
duration	merc.h	/^    sh_int              duration;$/;"	m	struct:affect_data
echo_off_str	handle_con.c	/^const   char    echo_off_str    [] = { IAC, WILL, TELOPT_ECHO, '\\0' };$/;"	v
echo_on_str	handle_con.c	/^const   char    echo_on_str     [] = { IAC, WONT, TELOPT_ECHO, '\\0' };$/;"	v
edit_done	olc.c	/^bool edit_done( CHAR_DATA *ch )$/;"	f
editor	merc.h	/^    int                 editor;         \/* OLC *\/$/;"	m	struct:descriptor_data
editor_cmd_type	olc.h	/^struct  editor_cmd_type$/;"	s
editor_table	olc.c	/^const struct editor_cmd_type editor_table[] =$/;"	v
ee	merc.h	564;"	d
email	merc.h	/^    char *              email;$/;"	m	struct:pc_data
empty	merc.h	/^    bool                empty;          \/* ROM OLC *\/$/;"	m	struct:area_data
enchanted	merc.h	/^    bool                enchanted;$/;"	m	struct:obj_data
equip_char	handler.c	/^void equip_char( CHAR_DATA *ch, OBJ_DATA *obj, int iWear )$/;"	f
eval_dir	act_info.c	/^void eval_dir(char *dir, int mov_dir, int num,CHAR_DATA *ch, int *see, ROOM_INDEX_DATA *first_room)$/;"	f
exit	merc.h	/^   EXIT_DATA           *exit    [6];$/;"	m	struct:room_index_data
exit_data	merc.h	/^struct  exit_data$/;"	s
exit_flags	bit.c	/^const struct flag_type exit_flags[] =$/;"	v
exit_free	mem.c	/^EXIT_DATA               *       exit_free;$/;"	v
exit_info	merc.h	/^    sh_int              exit_info;$/;"	m	struct:exit_data
exp	merc.h	/^    long                exp;$/;"	m	struct:char_data
expire	merc.h	/^    time_t      expire;$/;"	m	struct:note_data
extra_bit_name	handler.c	/^char *extra_bit_name( int extra_flags )$/;"	f
extra_descr	merc.h	/^    EXTRA_DESCR_DATA *  extra_descr;$/;"	m	struct:obj_data
extra_descr	merc.h	/^    EXTRA_DESCR_DATA *  extra_descr;$/;"	m	struct:obj_index_data
extra_descr	merc.h	/^   EXTRA_DESCR_DATA    *extra_descr;$/;"	m	struct:room_index_data
extra_descr_data	merc.h	/^struct  extra_descr_data$/;"	s
extra_descr_free	db.c	/^EXTRA_DESCR_DATA *      extra_descr_free;$/;"	v
extra_descr_free	mem.c	/^EXTRA_DESCR_DATA        *       extra_descr_free;$/;"	v
extra_flags	bit.c	/^const struct flag_type extra_flags[] =$/;"	v
extra_flags	merc.h	/^    int                 extra_flags;$/;"	m	struct:obj_data
extra_flags	merc.h	/^    int                 extra_flags;$/;"	m	struct:obj_index_data
extract_char	handler.c	/^void extract_char( CHAR_DATA *ch, bool fPull )$/;"	f
extract_obj	handler.c	/^void extract_obj( OBJ_DATA *obj )$/;"	f
fBonusMob	merc.h	/^	bool				fBonusMob;$/;"	m	struct:char_data
fBootDb	db.c	/^bool                    fBootDb;$/;"	v
fLogAll	interp.c	/^bool                            fLogAll         = FALSE;$/;"	v
fMana	merc.h	/^    bool        fMana;                  \/* Class gains mana on level    *\/$/;"	m	struct:class_type
fcommand	merc.h	/^    bool                fcommand;$/;"	m	struct:descriptor_data
fighting	merc.h	/^    CHAR_DATA *         fighting;$/;"	m	struct:char_data
figurestate	comm.c	/^char *figurestate(int current, int max)$/;"	f
filename	merc.h	/^    char *              filename;       \/* OLC *\/$/;"	m	struct:area_data
find_clan	clans.c	/^CLAN_DATA *find_clan( char *name )$/;"	f
find_door	act_move.c	/^int find_door( CHAR_DATA *ch, char *arg )$/;"	f
find_keeper	act_obj.c	/^CHAR_DATA *find_keeper( CHAR_DATA *ch )$/;"	f
find_location	act_wiz.c	/^ROOM_INDEX_DATA *find_location( CHAR_DATA *ch, char *arg )$/;"	f
find_mem_size	buffer.c	/^int find_mem_size (int min_size)$/;"	f
find_note	board.c	/^static NOTE_DATA* find_note (CHAR_DATA *ch, BOARD_DATA *board, int num)$/;"	f	file:
finish_note	board.c	/^void finish_note (BOARD_DATA *board, NOTE_DATA *note)$/;"	f
fire_effect	effects.c	/^void fire_effect(void *vo, int level, int dam, int target)$/;"	f
first_arg	string.c	/^char *first_arg( char *argument, char *arg_first, bool fCase )$/;"	f
fix_exits	db.c	/^void fix_exits( void )$/;"	f
fix_sex	comm.c	/^void fix_sex(CHAR_DATA *ch)$/;"	f
fix_string	olc_save.c	/^char *fix_string( const char *str )$/;"	f
flag	merc.h	/^    long flag;$/;"	m	struct:wiznet_type
flag_convert	db.c	/^long flag_convert(char letter )$/;"	f
flag_lookup	bit.c	/^int flag_lookup (const char *name, const struct flag_type *flag_table)$/;"	f
flag_stat_table	bit.c	/^const struct flag_stat_type flag_stat_table[] =$/;"	v
flag_stat_type	bit.c	/^struct flag_stat_type$/;"	s	file:
flag_string	bit.c	/^char *flag_string( const struct flag_type *flag_table, int bits )$/;"	f
flag_type	merc.h	/^struct flag_type$/;"	s
flag_value	bit.c	/^int flag_value( const struct flag_type *flag_table, char *argument)$/;"	f
force_type	board.h	/^        int force_type; \/* Default action (DEF_XXX) *\/$/;"	m	struct:board_data
form	merc.h	/^    long                form;$/;"	m	struct:char_data
form	merc.h	/^    long                form;$/;"	m	struct:mob_index_data
form	merc.h	/^    long        form;                   \/* default form flag for the race *\/$/;"	m	struct:race_type
form_bit_name	handler.c	/^char *form_bit_name(int form_flags)$/;"	f
form_flags	bit.c	/^const struct flag_type form_flags[] =$/;"	v
format_obj_to_char	act_info.c	/^char *format_obj_to_char( OBJ_DATA *obj, CHAR_DATA *ch, bool fShort )$/;"	f
format_string	string.c	/^char *format_string( char *oldstring \/*, bool fSpace *\/)$/;"	f
fpArea	db.c	/^FILE *                  fpArea;$/;"	v
fpReserve	comm.c	/^FILE *              fpReserve;          \/* Reserved file handle         *\/$/;"	v
fread_char	save.c	/^void fread_char( CHAR_DATA *ch, FILE *fp )$/;"	f
fread_flag	db.c	/^long fread_flag( FILE *fp)$/;"	f
fread_letter	db.c	/^char fread_letter( FILE *fp )$/;"	f
fread_number	db.c	/^int fread_number( FILE *fp )$/;"	f
fread_obj	save.c	/^void fread_obj( CHAR_DATA *ch, FILE *fp )$/;"	f
fread_pet	save.c	/^void fread_pet( CHAR_DATA *ch, FILE *fp )$/;"	f
fread_string	db.c	/^char *fread_string( FILE *fp )$/;"	f
fread_string_eol	db.c	/^char *fread_string_eol( FILE *fp )$/;"	f
fread_to_eol	db.c	/^void fread_to_eol( FILE *fp )$/;"	f
fread_word	db.c	/^char *fread_word( FILE *fp )$/;"	f
free_affect	mem.c	/^void free_affect( AFFECT_DATA* pAf )$/;"	f
free_area	mem.c	/^void free_area( AREA_DATA *pArea )$/;"	f
free_ban	mem.c	/^void free_ban(BAN_DATA *ban)$/;"	f
free_char	db.c	/^void free_char( CHAR_DATA *ch )$/;"	f
free_exit	mem.c	/^void free_exit( EXIT_DATA *pExit )$/;"	f
free_extra_descr	mem.c	/^void free_extra_descr( EXTRA_DESCR_DATA *pExtra )$/;"	f
free_mob_index	mem.c	/^void free_mob_index( MOB_INDEX_DATA *pMob )$/;"	f
free_note	board.c	/^void free_note (NOTE_DATA *note)$/;"	f
free_obj_index	mem.c	/^void free_obj_index( OBJ_INDEX_DATA *pObj )$/;"	f
free_reset_data	mem.c	/^void free_reset_data( RESET_DATA *pReset ) {$/;"	f
free_room_index	mem.c	/^void free_room_index( ROOM_INDEX_DATA *pRoom )$/;"	f
free_shop	mem.c	/^void free_shop( SHOP_DATA *pShop )$/;"	f
free_string	db.c	/^void free_string( char *pstr )$/;"	f
fwrite_char	save.c	/^void fwrite_char( CHAR_DATA *ch, FILE *fp )$/;"	f
fwrite_flag	olc_save.c	/^char *fwrite_flag( long flags, char buf[] )$/;"	f
fwrite_obj	save.c	/^void fwrite_obj( CHAR_DATA *ch, OBJ_DATA *obj, FILE *fp, int iNest )$/;"	f
fwrite_pet	save.c	/^void fwrite_pet( CHAR_DATA *pet, FILE *fp)$/;"	f
gain_condition	update.c	/^void gain_condition( CHAR_DATA *ch, int iCond, int value )$/;"	f
gain_exp	update.c	/^void gain_exp( CHAR_DATA *ch, int gain ) {$/;"	f
game_even_odd	dice_games.c	/^void game_even_odd( CHAR_DATA *ch, char *argument )$/;"	f
game_high_low	dice_games.c	/^void game_high_low( CHAR_DATA *ch, char *argument )$/;"	f
game_higher_lower	dice_games.c	/^void game_higher_lower( CHAR_DATA *ch, char *argument )$/;"	f
game_loop	comm.c	/^void game_loop( int control )$/;"	f
gen_data	merc.h	/^    GEN_DATA *          gen_data;$/;"	m	struct:char_data
gen_data	merc.h	/^struct gen_data$/;"	s
generate_quest	quest.c	/^void generate_quest(CHAR_DATA *ch, CHAR_DATA *questman) {$/;"	f
get_age	handler.c	/^int get_age( CHAR_DATA *ch )$/;"	f
get_area_data	olc.c	/^AREA_DATA *get_area_data( int vnum )$/;"	f
get_char_area	handler.c	/^CHAR_DATA *get_char_area( CHAR_DATA *ch, char *argument )$/;"	f
get_char_room	handler.c	/^CHAR_DATA *get_char_room( CHAR_DATA *ch, char *argument )$/;"	f
get_char_world	handler.c	/^CHAR_DATA *get_char_world( CHAR_DATA *ch, char *argument )$/;"	f
get_clan	clans.c	/^int get_clan( char *name )$/;"	f
get_cost	act_obj.c	/^int get_cost( CHAR_DATA *keeper, OBJ_DATA *obj, bool fBuy )$/;"	f
get_curdate	handler.c	/^char *get_curdate()$/;"	f
get_curr_stat	handler.c	/^int get_curr_stat( CHAR_DATA *ch, int stat )$/;"	f
get_curtime	handler.c	/^char *get_curtime()$/;"	f
get_date	handler.c	/^char *get_date(time_t tm)$/;"	f
get_eq_char	handler.c	/^OBJ_DATA *get_eq_char( CHAR_DATA *ch, int iWear )$/;"	f
get_extra_descr	db.c	/^char *get_extra_descr( const char *name, EXTRA_DESCR_DATA *ed )$/;"	f
get_max_train	handler.c	/^int get_max_train( CHAR_DATA *ch, int stat )$/;"	f
get_mob_index	db.c	/^MOB_INDEX_DATA *get_mob_index( int vnum )$/;"	f
get_obj	act_obj.c	/^void get_obj( CHAR_DATA *ch, OBJ_DATA *obj, OBJ_DATA *container )$/;"	f
get_obj_carry	handler.c	/^OBJ_DATA *get_obj_carry( CHAR_DATA *ch, char *argument )$/;"	f
get_obj_here	handler.c	/^OBJ_DATA *get_obj_here( CHAR_DATA *ch, char *argument )$/;"	f
get_obj_index	db.c	/^OBJ_INDEX_DATA *get_obj_index( int vnum )$/;"	f
get_obj_list	handler.c	/^OBJ_DATA *get_obj_list( CHAR_DATA *ch, char *argument, OBJ_DATA *list )$/;"	f
get_obj_number	handler.c	/^int get_obj_number( OBJ_DATA *obj )$/;"	f
get_obj_type	handler.c	/^OBJ_DATA *get_obj_type( OBJ_INDEX_DATA *pObjIndex )$/;"	f
get_obj_wear	handler.c	/^OBJ_DATA *get_obj_wear( CHAR_DATA *ch, char *argument )$/;"	f
get_obj_weight	handler.c	/^int get_obj_weight( OBJ_DATA *obj )$/;"	f
get_obj_world	handler.c	/^OBJ_DATA *get_obj_world( CHAR_DATA *ch, char *argument )$/;"	f
get_random_mob	bonus_update.c	/^CHAR_DATA *get_random_mob( void ) {$/;"	f
get_random_room	act_enter.c	/^ROOM_INDEX_DATA  *get_random_room(CHAR_DATA *ch)$/;"	f
get_room_index	db.c	/^ROOM_INDEX_DATA *get_room_index( int vnum )$/;"	f
get_second_weapon_sn	handler.c	/^int get_second_weapon_sn(CHAR_DATA *ch)$/;"	f
get_skill	handler.c	/^int get_skill(CHAR_DATA *ch, int sn)$/;"	f
get_time	handler.c	/^char *get_time(time_t tm)$/;"	f
get_vnum_area	olc_act.c	/^AREA_DATA *get_vnum_area( int vnum )$/;"	f
get_weapon_skill	handler.c	/^int get_weapon_skill(CHAR_DATA *ch, int sn)$/;"	f
get_weapon_sn	handler.c	/^int get_weapon_sn(CHAR_DATA *ch)$/;"	f
gn_add	skills.c	/^void gn_add( CHAR_DATA *ch, int gn ) {$/;"	f
gn_remove	skills.c	/^void gn_remove( CHAR_DATA *ch, int gn ) {$/;"	f
go_ahead_str	comm.c	/^const   char    go_ahead_str    [] = { IAC, GA, '\\0' };$/;"	v
god	merc.h	/^    char *              god;$/;"	m	struct:clan_data
going	merc.h	/^    sh_int      going;  \/* 1, 2, sold *\/$/;"	m	struct:auction_data
gold	merc.h	/^    long                gold;$/;"	m	struct:char_data
gold	merc.h	/^    long                gold;$/;"	m	struct:mob_index_data
group	music.h	/^    char *group;$/;"	m	struct:song_data
group_add	skills.c	/^void group_add( CHAR_DATA *ch, const char *name, bool deduct ) {$/;"	f
group_chosen	merc.h	/^    bool        group_chosen[MAX_GROUP];$/;"	m	struct:gen_data
group_gain	fight.c	/^void group_gain( CHAR_DATA *ch, CHAR_DATA *victim ) {$/;"	f
group_known	merc.h	/^    bool                group_known     [MAX_GROUP];$/;"	m	struct:pc_data
group_lookup	skills.c	/^int group_lookup( const char *name ) {$/;"	f
group_remove	skills.c	/^void group_remove( CHAR_DATA *ch, const char *name ) {$/;"	f
group_table	const.c	/^const   struct  group_type      group_table     [MAX_GROUP]     =$/;"	v
group_type	merc.h	/^struct  group_type$/;"	s
gsn	merc.h	/^    sh_int *gsn;$/;"	m	struct:weapon_type
gsn_axe	db.c	/^sh_int                  gsn_axe;$/;"	v
gsn_backstab	db.c	/^sh_int                  gsn_backstab;$/;"	v
gsn_bash	db.c	/^sh_int                  gsn_bash;$/;"	v
gsn_berserk	db.c	/^sh_int                  gsn_berserk;$/;"	v
gsn_blindness	db.c	/^sh_int                  gsn_blindness;$/;"	v
gsn_brew	db.c	/^sh_int                  gsn_brew;$/;"	v
gsn_butcher	db.c	/^sh_int                  gsn_butcher;$/;"	v
gsn_charm_person	db.c	/^sh_int                  gsn_charm_person;$/;"	v
gsn_circle	db.c	/^sh_int                  gsn_circle;$/;"	v
gsn_curse	db.c	/^sh_int                  gsn_curse;$/;"	v
gsn_dagger	db.c	/^sh_int                  gsn_dagger;$/;"	v
gsn_dirt	db.c	/^sh_int                  gsn_dirt;$/;"	v
gsn_disarm	db.c	/^sh_int                  gsn_disarm;$/;"	v
gsn_dodge	db.c	/^sh_int                  gsn_dodge;$/;"	v
gsn_enhanced_damage	db.c	/^sh_int                  gsn_enhanced_damage;$/;"	v
gsn_envenom	db.c	/^sh_int                  gsn_envenom;$/;"	v
gsn_fast_healing	db.c	/^sh_int                  gsn_fast_healing;$/;"	v
gsn_flail	db.c	/^sh_int                  gsn_flail;$/;"	v
gsn_grip	db.c	/^sh_int                  gsn_grip;$/;"	v
gsn_haggle	db.c	/^sh_int                  gsn_haggle;$/;"	v
gsn_hand_to_hand	db.c	/^sh_int                  gsn_hand_to_hand;$/;"	v
gsn_hide	db.c	/^sh_int                  gsn_hide;$/;"	v
gsn_invis	db.c	/^sh_int                  gsn_invis;$/;"	v
gsn_kick	db.c	/^sh_int                  gsn_kick;$/;"	v
gsn_lore	db.c	/^sh_int                  gsn_lore;$/;"	v
gsn_mace	db.c	/^sh_int                  gsn_mace;$/;"	v
gsn_mass_invis	db.c	/^sh_int                  gsn_mass_invis;$/;"	v
gsn_meditation	db.c	/^sh_int                  gsn_meditation;$/;"	v
gsn_parry	db.c	/^sh_int                  gsn_parry;$/;"	v
gsn_peek	db.c	/^sh_int                  gsn_peek;$/;"	v
gsn_pick_lock	db.c	/^sh_int                  gsn_pick_lock;$/;"	v
gsn_plague	db.c	/^sh_int                  gsn_plague;$/;"	v
gsn_poison	db.c	/^sh_int                  gsn_poison;$/;"	v
gsn_polearm	db.c	/^sh_int                  gsn_polearm;$/;"	v
gsn_push	db.c	/^sh_int                  gsn_push;$/;"	v
gsn_recall	db.c	/^sh_int                  gsn_recall;$/;"	v
gsn_rescue	db.c	/^sh_int                  gsn_rescue;$/;"	v
gsn_scribe	db.c	/^sh_int                  gsn_scribe;$/;"	v
gsn_scrolls	db.c	/^sh_int                  gsn_scrolls;$/;"	v
gsn_second_attack	db.c	/^sh_int                  gsn_second_attack;$/;"	v
gsn_shield_block	db.c	/^sh_int                  gsn_shield_block;$/;"	v
gsn_sleep	db.c	/^sh_int                  gsn_sleep;$/;"	v
gsn_sneak	db.c	/^sh_int                  gsn_sneak;$/;"	v
gsn_spear	db.c	/^sh_int                  gsn_spear;$/;"	v
gsn_staves	db.c	/^sh_int                  gsn_staves;$/;"	v
gsn_steal	db.c	/^sh_int                  gsn_steal;$/;"	v
gsn_sword	db.c	/^sh_int                  gsn_sword;$/;"	v
gsn_third_attack	db.c	/^sh_int                  gsn_third_attack;$/;"	v
gsn_trip	db.c	/^sh_int                  gsn_trip;$/;"	v
gsn_wands	db.c	/^sh_int                  gsn_wands;$/;"	v
gsn_whip	db.c	/^sh_int                  gsn_whip;$/;"	v
gsn_whirlwind	db.c	/^sh_int                  gsn_whirlwind;$/;"	v
guild	merc.h	/^    sh_int      guild[MAX_GUILD];       \/* Vnum of guild rooms          *\/$/;"	m	struct:class_type
handle_con_ansi	handle_con.c	/^void handle_con_ansi( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_break_connect	handle_con.c	/^void handle_con_break_connect( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_confirm_new_name	handle_con.c	/^void handle_con_confirm_new_name( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_confirm_new_password	handle_con.c	/^void handle_con_confirm_new_password( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_default_choice	handle_con.c	/^void handle_con_default_choice( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_gen_groups	handle_con.c	/^void handle_con_gen_groups( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_get_alignment	handle_con.c	/^void handle_con_get_alignment( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_get_name	handle_con.c	/^void handle_con_get_name( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_get_new_class	handle_con.c	/^void handle_con_get_new_class( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_get_new_password	handle_con.c	/^void handle_con_get_new_password( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_get_new_race	handle_con.c	/^void handle_con_get_new_race( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_get_new_sex	handle_con.c	/^void handle_con_get_new_sex( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_get_old_password	handle_con.c	/^void handle_con_get_old_password( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_get_stats	handle_con.c	/^void handle_con_get_stats( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_note_expire	board.c	/^void handle_con_note_expire(DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_con_note_finish	board.c	/^void handle_con_note_finish (DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_con_note_subject	board.c	/^void handle_con_note_subject (DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_con_note_text	board.c	/^void handle_con_note_text (DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_con_note_to	board.c	/^void handle_con_note_to (DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_con_pick_weapon	handle_con.c	/^void handle_con_pick_weapon( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_read_imotd	handle_con.c	/^void handle_con_read_imotd( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
handle_con_read_motd	handle_con.c	/^void handle_con_read_motd( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
help_data	merc.h	/^struct  help_data$/;"	s
help_first	db.c	/^HELP_DATA *             help_first;$/;"	v
help_free	mem.c	/^HELP_DATA               *       help_free;$/;"	v
help_greeting	db.c	/^char *                  help_greeting;$/;"	v
help_last	db.c	/^HELP_DATA *             help_last;$/;"	v
help_last	mem.c	/^HELP_DATA               *       help_last;$/;"	v
help_table	olc_act.c	/^const struct olc_help_type help_table[] =$/;"	v
hit	merc.h	/^    sh_int              hit;$/;"	m	struct:char_data
hit	merc.h	/^    sh_int              hit[3];$/;"	m	struct:mob_index_data
hit_gain	update.c	/^int hit_gain( CHAR_DATA *ch )$/;"	f
hitp	merc.h	/^    sh_int      hitp;$/;"	m	struct:con_app_type
hitroll	merc.h	/^    sh_int              hitroll;$/;"	m	struct:char_data
hitroll	merc.h	/^    sh_int              hitroll;$/;"	m	struct:mob_index_data
host	merc.h	/^    char *              host;$/;"	m	struct:descriptor_data
hour	merc.h	/^    int         hour;$/;"	m	struct:time_info_data
hp_max	merc.h	/^    sh_int      hp_max;                 \/* Max hp gained on leveling    *\/$/;"	m	struct:class_type
hp_min	merc.h	/^    sh_int      hp_min;                 \/* Min hp gained on leveling    *\/$/;"	m	struct:class_type
imm	merc.h	/^    long        imm;                    \/* imm bits for the race *\/$/;"	m	struct:race_type
immRank	merc.h	/^	int					immRank;$/;"	m	struct:char_data
imm_bit_name	handler.c	/^char *imm_bit_name(int imm_flags)$/;"	f
imm_flags	bit.c	/^const struct flag_type imm_flags[] =$/;"	v
imm_flags	merc.h	/^    long                imm_flags;$/;"	m	struct:char_data
imm_flags	merc.h	/^    long                imm_flags;$/;"	m	struct:mob_index_data
immortalObject	merc.h	/^	bool immortalObject;$/;"	m	struct:obj_data
in_obj	merc.h	/^    OBJ_DATA *          in_obj;$/;"	m	struct:obj_data
in_progress	merc.h	/^    NOTE_DATA *         in_progress;$/;"	m	struct:pc_data
in_room	merc.h	/^    ROOM_INDEX_DATA *   in_room;$/;"	m	struct:char_data
in_room	merc.h	/^    ROOM_INDEX_DATA *   in_room;$/;"	m	struct:obj_data
inbuf	merc.h	/^    char                inbuf           [4 * MAX_INPUT_LENGTH];$/;"	m	struct:descriptor_data
incog_level	merc.h	/^    sh_int              incog_level; \/* Incog level added by Rahl *\/$/;"	m	struct:char_data
incomm	merc.h	/^    char                incomm          [MAX_INPUT_LENGTH];$/;"	m	struct:descriptor_data
init_descriptor	comm.c	/^void init_descriptor( DESCRIPTOR_DATA *dnew, int desc)$/;"	f
init_mm	db.c	/^void init_mm( )$/;"	f
init_socket	comm.c	/^int init_socket( int port )$/;"	f
inlast	merc.h	/^    char                inlast          [MAX_INPUT_LENGTH];$/;"	m	struct:descriptor_data
insert_sort	act_info.c	/^void insert_sort(CHAR_DATA *who_list[300], CHAR_DATA *ch, int length)$/;"	f
int_app	const.c	/^const   struct  int_app_type    int_app         [26]            =$/;"	v
int_app_type	merc.h	/^struct  int_app_type$/;"	s
interpolate	db.c	/^int interpolate( int level, int value_00, int value_32 )$/;"	f
interpret	interp.c	/^void interpret( CHAR_DATA *ch, char *argument )$/;"	f
invis_level	merc.h	/^    sh_int              invis_level;$/;"	m	struct:char_data
is_affected	handler.c	/^bool is_affected( CHAR_DATA *ch, int sn )$/;"	f
is_clan_leader	clans.c	/^bool is_clan_leader(CHAR_DATA *ch, char *Clan)$/;"	f
is_exact_name	handler.c	/^bool is_exact_name ( char *str, char *namelist )$/;"	f
is_friend	mob_cast.c	/^bool is_friend(CHAR_DATA *ch, CHAR_DATA *victim)$/;"	f
is_name	handler.c	/^bool is_name ( char *str, char *namelist )$/;"	f
is_note_to	board.c	/^bool is_note_to (CHAR_DATA *ch, NOTE_DATA *note)$/;"	f
is_number	interp.c	/^bool is_number ( char *arg )$/;"	f
is_room_owner	handler.c	/^bool is_room_owner(CHAR_DATA *ch, ROOM_INDEX_DATA *room)$/;"	f
is_safe	fight.c	/^bool is_safe(CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
is_safe_spell	fight.c	/^bool is_safe_spell(CHAR_DATA *ch, CHAR_DATA *victim, bool area )$/;"	f
is_same_clan	act_comm.c	/^bool is_same_clan (CHAR_DATA *ch, CHAR_DATA *victim) {$/;"	f
is_same_group	act_comm.c	/^bool is_same_group( CHAR_DATA *ach, CHAR_DATA *bch ) {$/;"	f
is_stat	bit.c	/^bool is_stat( const struct flag_type *flag_table )$/;"	f
item	merc.h	/^    OBJ_DATA    * item;         \/* pointer to the item *\/$/;"	m	struct:auction_data
item_type	merc.h	/^    sh_int              item_type;$/;"	m	struct:obj_data
item_type	merc.h	/^    sh_int              item_type;$/;"	m	struct:obj_index_data
item_type_name	handler.c	/^char *item_type_name( OBJ_DATA *obj )$/;"	f
keeper	merc.h	/^    sh_int      keeper;                 \/* Vnum of shop keeper mob      *\/$/;"	m	struct:shop_data
key	merc.h	/^    sh_int              key;$/;"	m	struct:exit_data
keyword	merc.h	/^    char *              keyword;$/;"	m	struct:exit_data
keyword	merc.h	/^    char *      keyword;$/;"	m	struct:help_data
keyword	merc.h	/^    char *keyword;              \/* Keyword in look\/examine          *\/$/;"	m	struct:extra_descr_data
killed	merc.h	/^    int                 killed;$/;"	m	struct:pc_data
killed	merc.h	/^    sh_int              killed;$/;"	m	struct:mob_index_data
kills	merc.h	/^    int                 kills;$/;"	m	struct:pc_data
last_level	merc.h	/^    int                 last_level;$/;"	m	struct:pc_data
last_note	merc.h	/^    time_t              last_note;$/;"	m	struct:char_data
last_note	merc.h	/^    time_t              last_note[MAX_BOARD];$/;"	m	struct:pc_data
last_note_stamp	board.c	/^long last_note_stamp = 0; \/* To generate unique timestamps on notes *\/$/;"	v
leader	merc.h	/^    CHAR_DATA *         leader;$/;"	m	struct:char_data
leader	merc.h	/^    char *              leader;$/;"	m	struct:clan_data
learn	merc.h	/^    sh_int      learn;$/;"	m	struct:int_app_type
learned	merc.h	/^    sh_int              learned         [MAX_SKILL];$/;"	m	struct:pc_data
len	buffer.h	/^        int len;        \/* The current len of the buffer *\/$/;"	m	struct:buffer_type
level	interp.h	/^    sh_int              level;$/;"	m	struct:cmd_type
level	merc.h	/^    int  level;$/;"	m	struct:wiznet_type
level	merc.h	/^    sh_int              level;$/;"	m	struct:affect_data
level	merc.h	/^    sh_int              level;$/;"	m	struct:char_data
level	merc.h	/^    sh_int              level;$/;"	m	struct:mob_index_data
level	merc.h	/^    sh_int              level;$/;"	m	struct:obj_data
level	merc.h	/^    sh_int              level;$/;"	m	struct:obj_index_data
level	merc.h	/^    sh_int      level;$/;"	m	struct:help_data
level	merc.h	/^    sh_int level;                    \/* level of disabler *\/$/;"	m	struct:disabled_data
light	merc.h	/^   sh_int               light;$/;"	m	struct:room_index_data
lines	merc.h	/^    int                 lines;  \/* for the pager *\/$/;"	m	struct:char_data
lines	music.h	/^    int lines;$/;"	m	struct:song_data
liq_affect	merc.h	/^    sh_int      liq_affect[3];$/;"	m	struct:liq_type
liq_color	merc.h	/^    char *      liq_color;$/;"	m	struct:liq_type
liq_name	merc.h	/^    char *      liq_name;$/;"	m	struct:liq_type
liq_table	const.c	/^const   struct  liq_type        liq_table       [LIQ_MAX]       =$/;"	v
liq_type	merc.h	/^struct  liq_type$/;"	s
liquid_flags	bit.c	/^const struct flag_type liquid_flags[] =$/;"	v
list_group_chosen	skills.c	/^void list_group_chosen( CHAR_DATA *ch ) {$/;"	f
list_group_costs	skills.c	/^void list_group_costs( CHAR_DATA *ch ) {$/;"	f
load_bans	ban.c	/^void load_bans(void)$/;"	f
load_board	board.c	/^static void load_board (BOARD_DATA *board)$/;"	f	file:
load_boards	board.c	/^void load_boards ()$/;"	f
load_char_obj	save.c	/^bool load_char_obj( DESCRIPTOR_DATA *d, char *name )$/;"	f
load_clans	db.c	/^void load_clans( FILE *fp )$/;"	f
load_disabled	interp.c	/^void load_disabled( void )$/;"	f
load_helps	db.c	/^void load_helps( FILE *fp )$/;"	f
load_mobiles	db.c	/^void load_mobiles( FILE *fp )$/;"	f
load_objects	db.c	/^void load_objects( FILE *fp )$/;"	f
load_resets	db.c	/^void load_resets( FILE *fp )$/;"	f
load_rooms	db.c	/^void load_rooms( FILE *fp )$/;"	f
load_shops	db.c	/^void load_shops( FILE *fp )$/;"	f
load_socials	db.c	/^void load_socials( FILE *fp)$/;"	f
load_songs	music.c	/^void load_songs(void)$/;"	f
load_specials	db.c	/^void load_specials( FILE *fp )$/;"	f
location	merc.h	/^    sh_int              location;$/;"	m	struct:affect_data
log	interp.h	/^    sh_int              log;$/;"	m	struct:cmd_type
log_buf	db.c	/^char                    log_buf         [2*MAX_INPUT_LENGTH];$/;"	v
log_string	db.c	/^void log_string( const char *str )$/;"	f
log_stringf	handler.c	/^void log_stringf( char *fmt, ...)$/;"	f
logon	merc.h	/^    time_t              logon;$/;"	m	struct:char_data
long_descr	merc.h	/^    char *              long_descr;$/;"	m	struct:char_data
long_descr	merc.h	/^    char *              long_descr;$/;"	m	struct:mob_index_data
long_name	board.h	/^        char *long_name;  \/* Explanatory text, should be no more than 40 ? chars *\/$/;"	m	struct:board_data
lose	dice_games.c	/^void lose( CHAR_DATA *ch, long amnt )$/;"	f
lvnum	merc.h	/^    int                 lvnum;          \/* OLC *\/ \/* Lower vnum *\/$/;"	m	struct:area_data
lyrics	music.h	/^    char *lyrics[MAX_LINES];$/;"	m	struct:song_data
main	comm.c	/^int main( int argc, char **argv )$/;"	f
make_corpse	fight.c	/^void make_corpse( CHAR_DATA *ch )$/;"	f
make_note	board.c	/^void make_note (const char* board_name, const char *sender, const char *to, const char *subject, const int expire_days, const char *text)$/;"	f
mana	merc.h	/^    sh_int              mana;$/;"	m	struct:char_data
mana	merc.h	/^    sh_int              mana[3];$/;"	m	struct:mob_index_data
mana_cost	magic.c	/^int mana_cost (CHAR_DATA *ch, int min_mana, int level)$/;"	f
mana_gain	update.c	/^int mana_gain( CHAR_DATA *ch )$/;"	f
master	merc.h	/^    CHAR_DATA *         master;$/;"	m	struct:char_data
material	merc.h	/^    long                material;$/;"	m	struct:char_data
material	merc.h	/^    long                material;$/;"	m	struct:mob_index_data
material	merc.h	/^    long                material;$/;"	m	struct:obj_data
material	merc.h	/^    long                material;$/;"	m	struct:obj_index_data
material_lookup	handler.c	/^long material_lookup (const char *name)$/;"	f
material_name	handler.c	/^char *material_name( long num )$/;"	f
material_type	bit.c	/^const struct flag_type material_type[] =    \/* not yet implemented *\/$/;"	v
max_hit	merc.h	/^    sh_int              max_hit;$/;"	m	struct:char_data
max_mana	merc.h	/^    sh_int              max_mana;$/;"	m	struct:char_data
max_members	merc.h	/^    sh_int              max_members;$/;"	m	struct:clan_data
max_move	merc.h	/^    sh_int              max_move;$/;"	m	struct:char_data
max_stats	merc.h	/^    sh_int      max_stats[MAX_STATS];   \/* maximum stats *\/$/;"	m	struct:pc_race_type
maxfilelimit	db.c	/^void maxfilelimit()$/;"	f
medit	olc.c	/^void medit( CHAR_DATA *ch, char *argument )$/;"	f
medit_table	olc.c	/^const struct olc_cmd_type medit_table[] =$/;"	v
members	merc.h	/^    char *              members[MAX_CLAN_MEMBERS];$/;"	m	struct:clan_data
merc_down	comm.c	/^bool                merc_down;          \/* Shutdown                     *\/$/;"	v
message_ctr	merc.h	/^    int                 message_ctr;$/;"	m	struct:pc_data
min_level	merc.h	/^    sh_int              min_level;$/;"	m	struct:clan_data
min_mana	merc.h	/^    sh_int      min_mana;               \/* Minimum mana used            *\/$/;"	m	struct:skill_type
minimum_position	merc.h	/^    sh_int      minimum_position;       \/* Position for caster \/ user   *\/$/;"	m	struct:skill_type
mmhg	merc.h	/^    int         mmhg;$/;"	m	struct:weather_data
mob_hit	fight.c	/^void mob_hit (CHAR_DATA *ch, CHAR_DATA *victim, int dt)$/;"	f
mob_index_data	merc.h	/^struct  mob_index_data$/;"	s
mob_index_free	mem.c	/^MOB_INDEX_DATA          *       mob_index_free;$/;"	v
mob_index_hash	db.c	/^MOB_INDEX_DATA *        mob_index_hash          [MAX_KEY_HASH];$/;"	v
mobile_count	db.c	/^int                     mobile_count = 0;$/;"	v
mobile_update	update.c	/^void mobile_update( void )$/;"	f
mod_stat	merc.h	/^    sh_int              mod_stat[MAX_STATS];$/;"	m	struct:char_data
modifier	merc.h	/^    sh_int              modifier;$/;"	m	struct:affect_data
month	merc.h	/^    int         month;$/;"	m	struct:time_info_data
month_name	act_info.c	/^char *  const   month_name      [] =$/;"	v
move	merc.h	/^    sh_int              move;$/;"	m	struct:char_data
move_char	act_move.c	/^void move_char( CHAR_DATA *ch, int door, bool follow )$/;"	f
move_gain	update.c	/^int move_gain( CHAR_DATA *ch )$/;"	f
movement_loss	act_move.c	/^const   sh_int  movement_loss   [SECT_MAX]      =$/;"	v
msg_obj	merc.h	/^    char *      msg_obj;                \/* Wear off message for objects *\/$/;"	m	struct:skill_type
msg_off	merc.h	/^    char *      msg_off;                \/* Wear off message             *\/$/;"	m	struct:skill_type
multi_hit	fight.c	/^void multi_hit( CHAR_DATA *ch, CHAR_DATA *victim, int dt )$/;"	f
nAllocPerm	db.c	/^int                     nAllocPerm;$/;"	v
nAllocString	db.c	/^int                     nAllocString;$/;"	v
name	interp.h	/^    char * const        name;$/;"	m	struct:cmd_type
name	merc.h	/^    char      name[20];$/;"	m	struct:social_type
name	merc.h	/^    char *              name;$/;"	m	struct:area_data
name	merc.h	/^    char *              name;$/;"	m	struct:char_data
name	merc.h	/^    char *              name;$/;"	m	struct:clan_data
name	merc.h	/^    char *              name;$/;"	m	struct:obj_data
name	merc.h	/^    char *              name;$/;"	m	struct:obj_index_data
name	merc.h	/^    char *      name;                   \/* MUST be in race_type *\/$/;"	m	struct:pc_race_type
name	merc.h	/^    char *      name;                   \/* Name of skill                *\/$/;"	m	struct:skill_type
name	merc.h	/^    char *      name;                   \/* call name of the race *\/$/;"	m	struct:race_type
name	merc.h	/^    char *      name;                   \/* name and message *\/$/;"	m	struct:attack_type
name	merc.h	/^    char *      name;                   \/* the full name of the class *\/$/;"	m	struct:class_type
name	merc.h	/^    char *      name;$/;"	m	struct:ban_data
name	merc.h	/^    char *      name;$/;"	m	struct:group_type
name	merc.h	/^    char * name;$/;"	m	struct:flag_type
name	merc.h	/^    char *name;$/;"	m	struct:weapon_type
name	merc.h	/^    char *name;$/;"	m	struct:wiznet_type
name	merc.h	/^   char                *name;$/;"	m	struct:room_index_data
name	music.h	/^    char *name;$/;"	m	struct:song_data
name	olc.h	/^    char * const        name;$/;"	m	struct:editor_cmd_type
name	olc.h	/^    char * const        name;$/;"	m	struct:olc_cmd_type
names	board.h	/^        char *names;       \/* Default recipient *\/$/;"	m	struct:board_data
nanny	comm.c	/^void nanny( DESCRIPTOR_DATA *d, char *argument ) {$/;"	f
nemesis	merc.h	/^    CHAR_DATA *         nemesis;$/;"	m	struct:pc_data
new_affect	mem.c	/^AFFECT_DATA *new_affect( void )$/;"	f
new_area	mem.c	/^AREA_DATA *new_area( void )$/;"	f
new_ban	mem.c	/^BAN_DATA *new_ban(void)$/;"	f
new_clan	clans.c	/^void new_clan(char *clan_name, CHAR_DATA *ch)$/;"	f
new_descriptor	comm.c	/^void new_descriptor( int control )$/;"	f
new_exit	mem.c	/^EXIT_DATA *new_exit( void )$/;"	f
new_extra_descr	mem.c	/^EXTRA_DESCR_DATA *new_extra_descr( void )$/;"	f
new_load_area	db.c	/^void new_load_area( FILE *fp )$/;"	f
new_mob_index	mem.c	/^MOB_INDEX_DATA *new_mob_index( void )$/;"	f
new_note	board.c	/^NOTE_DATA *new_note ()$/;"	f
new_obj_index	mem.c	/^OBJ_INDEX_DATA *new_obj_index( void )$/;"	f
new_reset	db.c	/^void new_reset( ROOM_INDEX_DATA *pR, RESET_DATA *pReset )$/;"	f
new_reset_data	mem.c	/^RESET_DATA *new_reset_data( void ) {$/;"	f
new_room_index	mem.c	/^ROOM_INDEX_DATA *new_room_index( void )$/;"	f
new_shop	mem.c	/^SHOP_DATA *new_shop( void )$/;"	f
newlock	comm.c	/^bool                newlock = TRUE;            \/* Game is newlocked            *\/$/;"	v
next	merc.h	/^    AFFECT_DATA *       next;$/;"	m	struct:affect_data
next	merc.h	/^    AREA_DATA *         next;$/;"	m	struct:area_data
next	merc.h	/^    BAN_DATA *  next;$/;"	m	struct:ban_data
next	merc.h	/^    CHAR_DATA *         next;$/;"	m	struct:char_data
next	merc.h	/^    CLAN_DATA *         next;$/;"	m	struct:clan_data
next	merc.h	/^    DESCRIPTOR_DATA *   next;$/;"	m	struct:descriptor_data
next	merc.h	/^    DISABLED_DATA *next;             \/* pointer to the next node *\/$/;"	m	struct:disabled_data
next	merc.h	/^    EXIT_DATA *         next;           \/* OLC *\/$/;"	m	struct:exit_data
next	merc.h	/^    EXTRA_DESCR_DATA *next;     \/* Next in list                     *\/$/;"	m	struct:extra_descr_data
next	merc.h	/^    GEN_DATA    *next;$/;"	m	struct:gen_data
next	merc.h	/^    HELP_DATA * next;$/;"	m	struct:help_data
next	merc.h	/^    MOB_INDEX_DATA *    next;$/;"	m	struct:mob_index_data
next	merc.h	/^    NOTE_DATA * next;$/;"	m	struct:note_data
next	merc.h	/^    OBJ_DATA *          next;$/;"	m	struct:obj_data
next	merc.h	/^    OBJ_INDEX_DATA *    next;$/;"	m	struct:obj_index_data
next	merc.h	/^    PC_DATA *           next;$/;"	m	struct:pc_data
next	merc.h	/^    RESET_DATA *        next;$/;"	m	struct:reset_data
next	merc.h	/^    SHOP_DATA * next;                   \/* Next shop in list            *\/$/;"	m	struct:shop_data
next	merc.h	/^   ROOM_INDEX_DATA     *next;$/;"	m	struct:room_index_data
next_board	board.c	/^static bool next_board (CHAR_DATA *ch)$/;"	f	file:
next_content	merc.h	/^    OBJ_DATA *          next_content;$/;"	m	struct:obj_data
next_in_room	merc.h	/^    CHAR_DATA *         next_in_room;$/;"	m	struct:char_data
nextquest	merc.h	/^    sh_int              nextquest;$/;"	m	struct:char_data
note_data	merc.h	/^struct  note_data$/;"	s
note_first	board.h	/^        NOTE_DATA *note_first; \/* pointer to board's first note *\/$/;"	m	struct:board_data
note_free	db.c	/^NOTE_DATA *             note_free;$/;"	v
noun_damage	merc.h	/^    char *      noun_damage;            \/* Damage message               *\/$/;"	m	struct:skill_type
nplayer	merc.h	/^    sh_int              nplayer;$/;"	m	struct:area_data
nuke_pets	act_comm.c	/^void nuke_pets( CHAR_DATA *ch ) {    $/;"	f
num_members	merc.h	/^    sh_int              num_members;$/;"	m	struct:clan_data
number	merc.h	/^    sh_int              number;$/;"	m	struct:clan_data
number_argument	interp.c	/^int number_argument( char *argument, char *arg )$/;"	f
number_bits	db.c	/^int number_bits( int width )$/;"	f
number_door	db.c	/^int number_door( void )$/;"	f
number_fuzzier	db.c	/^int number_fuzzier( int number )$/;"	f
number_fuzziest	db.c	/^int number_fuzziest( int number )$/;"	f
number_fuzzy	db.c	/^int number_fuzzy( int number )$/;"	f
number_mm	db.c	/^int number_mm( void )$/;"	f
number_percent	db.c	/^int number_percent( void )$/;"	f
number_range	db.c	/^int number_range( int from, int to )$/;"	f
obj_cast_spell	magic.c	/^void obj_cast_spell( int sn, int level, CHAR_DATA *ch, CHAR_DATA *victim, OBJ_DATA *obj )$/;"	f
obj_check	act_wiz.c	/^bool obj_check (CHAR_DATA *ch, OBJ_DATA *obj)$/;"	f
obj_data	merc.h	/^struct  obj_data$/;"	s
obj_free	db.c	/^OBJ_DATA *              obj_free;$/;"	v
obj_from_char	handler.c	/^void obj_from_char( OBJ_DATA *obj )$/;"	f
obj_from_obj	handler.c	/^void obj_from_obj( OBJ_DATA *obj )$/;"	f
obj_from_room	handler.c	/^void obj_from_room( OBJ_DATA *obj )$/;"	f
obj_index_data	merc.h	/^struct  obj_index_data$/;"	s
obj_index_free	mem.c	/^OBJ_INDEX_DATA          *       obj_index_free;$/;"	v
obj_index_hash	db.c	/^OBJ_INDEX_DATA *        obj_index_hash          [MAX_KEY_HASH];$/;"	v
obj_to_char	handler.c	/^void obj_to_char( OBJ_DATA *obj, CHAR_DATA *ch )$/;"	f
obj_to_obj	handler.c	/^void obj_to_obj( OBJ_DATA *obj, OBJ_DATA *obj_to )$/;"	f
obj_to_room	handler.c	/^void obj_to_room( OBJ_DATA *obj, ROOM_INDEX_DATA *pRoomIndex )$/;"	f
obj_update	update.c	/^void obj_update( void )$/;"	f
object_list	db.c	/^OBJ_DATA *              object_list;$/;"	v
oedit	olc.c	/^void oedit( CHAR_DATA *ch, char *argument )$/;"	f
oedit_table	olc.c	/^const struct olc_cmd_type oedit_table[] =$/;"	v
oedit_values	olc_act.c	/^bool oedit_values( CHAR_DATA *ch, char *argument, int value )$/;"	f
off	merc.h	/^    long        off;                    \/* off bits for the race *\/$/;"	m	struct:race_type
off_bit_name	handler.c	/^char *off_bit_name(int off_flags)$/;"	f
off_flags	bit.c	/^const struct flag_type off_flags[] =$/;"	v
off_flags	merc.h	/^    long                off_flags;$/;"	m	struct:char_data
off_flags	merc.h	/^    long                off_flags;$/;"	m	struct:mob_index_data
olc_cmd_type	olc.h	/^struct olc_cmd_type$/;"	s
olc_ed_name	olc.c	/^char *olc_ed_name( CHAR_DATA *ch )$/;"	f
olc_ed_vnum	olc.c	/^char *olc_ed_vnum( CHAR_DATA *ch )$/;"	f
olc_fun	olc.h	/^    OLC_FUN *           olc_fun;$/;"	m	struct:olc_cmd_type
olc_help_type	olc_act.c	/^struct olc_help_type$/;"	s	file:
one_argument	interp.c	/^char *one_argument( char *argument, char *arg_first )$/;"	f
one_hit	fight.c	/^void one_hit( CHAR_DATA *ch, CHAR_DATA *victim, int dt )$/;"	f
open_hour	merc.h	/^    sh_int      open_hour;              \/* First opening hour           *\/$/;"	m	struct:shop_data
orig_door	merc.h	/^    int                 orig_door;      \/* OLC *\/$/;"	m	struct:exit_data
original	merc.h	/^    CHAR_DATA *         original;$/;"	m	struct:descriptor_data
others_auto	merc.h	/^    char *    others_auto;$/;"	m	struct:social_type
others_found	merc.h	/^    char *    others_found;$/;"	m	struct:social_type
others_no_arg	merc.h	/^    char *    others_no_arg;$/;"	m	struct:social_type
outbuf	merc.h	/^    char *              outbuf;$/;"	m	struct:descriptor_data
outsize	merc.h	/^    int                 outsize;$/;"	m	struct:descriptor_data
outtop	merc.h	/^    int                 outtop;$/;"	m	struct:descriptor_data
overflowed	buffer.h	/^        bool overflowed; \/* Is the buffer overflowed? *\/$/;"	m	struct:buffer_type
owner	merc.h	/^    char *              owner;$/;"	m	struct:obj_data
owner	merc.h	/^   char                *owner;$/;"	m	struct:room_index_data
pEdit	merc.h	/^    void *              pEdit;          \/* OLC *\/$/;"	m	struct:descriptor_data
pIndexData	merc.h	/^    MOB_INDEX_DATA *    pIndexData;$/;"	m	struct:char_data
pIndexData	merc.h	/^    OBJ_INDEX_DATA *    pIndexData;$/;"	m	struct:obj_data
pShop	merc.h	/^    SHOP_DATA *         pShop;$/;"	m	struct:mob_index_data
pString	merc.h	/^    char **             pString;        \/* OLC *\/$/;"	m	struct:descriptor_data
page_to_char	comm.c	/^void page_to_char( const char *txt, CHAR_DATA *ch )$/;"	f
parse_gen_groups	skills.c	/^bool parse_gen_groups( CHAR_DATA *ch, char *argument ) {$/;"	f
part_bit_name	handler.c	/^char *part_bit_name(int part_flags)$/;"	f
part_flags	bit.c	/^const struct flag_type part_flags[] =$/;"	v
parts	merc.h	/^    long                parts;$/;"	m	struct:char_data
parts	merc.h	/^    long                parts;$/;"	m	struct:mob_index_data
parts	merc.h	/^    long        parts;                  \/* default parts for the race *\/$/;"	m	struct:race_type
pc_data	merc.h	/^struct  pc_data$/;"	s
pc_race	merc.h	/^    bool        pc_race;                \/* can be chosen by pcs *\/$/;"	m	struct:race_type
pc_race_table	const.c	/^const   struct  pc_race_type    pc_race_table   []      =$/;"	v
pc_race_type	merc.h	/^struct pc_race_type  \/* additional data for pc races *\/$/;"	s
pcdata	merc.h	/^    PC_DATA *           pcdata;$/;"	m	struct:char_data
pcdata_free	db.c	/^PC_DATA *               pcdata_free;$/;"	v
people	merc.h	/^   CHAR_DATA           *people;$/;"	m	struct:room_index_data
perm_hit	merc.h	/^    sh_int              perm_hit;$/;"	m	struct:pc_data
perm_mana	merc.h	/^    sh_int              perm_mana;$/;"	m	struct:pc_data
perm_move	merc.h	/^    sh_int              perm_move;$/;"	m	struct:pc_data
perm_stat	merc.h	/^    sh_int              perm_stat[MAX_STATS];$/;"	m	struct:char_data
personal_message	board.c	/^void personal_message (const char *sender, const char *to, const char *subject, const int expire_days, const char *text)$/;"	f
pet	merc.h	/^    CHAR_DATA *         pet;$/;"	m	struct:char_data
pgsn	merc.h	/^    sh_int *    pgsn;                   \/* Pointer to associated gsn    *\/$/;"	m	struct:skill_type
pk_kill	fight.c	/^void pk_kill( CHAR_DATA *victim )$/;"	f
pkilled	merc.h	/^    int                 pkilled;$/;"	m	struct:pc_data
pkills	merc.h	/^    int                 pkills;$/;"	m	struct:pc_data
played	merc.h	/^    int                 played;$/;"	m	struct:char_data
player_name	merc.h	/^    char *              player_name;$/;"	m	struct:mob_index_data
points	merc.h	/^    sh_int              points;$/;"	m	struct:pc_data
points	merc.h	/^    sh_int      points;                 \/* cost in points of the race *\/$/;"	m	struct:pc_race_type
points_chosen	merc.h	/^    int         points_chosen;$/;"	m	struct:gen_data
poison_effect	effects.c	/^void poison_effect(void *vo,int level, int dam, int target)$/;"	f
port	comm.c	/^int port, control;$/;"	v
position	interp.h	/^    sh_int              position;$/;"	m	struct:cmd_type
position	merc.h	/^    sh_int              position;$/;"	m	struct:char_data
position_flags	bit.c	/^const struct flag_type position_flags[] =$/;"	v
practice	merc.h	/^    sh_int              practice;$/;"	m	struct:char_data
practice	merc.h	/^    sh_int      practice;$/;"	m	struct:wis_app_type
prefix	merc.h	/^    char *              prefix;$/;"	m	struct:char_data
print_flags	save.c	/^char *print_flags(int flag)$/;"	f
printf_to_char	handler.c	/^void printf_to_char( CHAR_DATA *ch, char *fmt, ...)$/;"	f
process_output	comm.c	/^bool process_output( DESCRIPTOR_DATA *d, bool fPrompt )$/;"	f
profit_buy	merc.h	/^    sh_int      profit_buy;             \/* Cost multiplier for buying   *\/$/;"	m	struct:shop_data
profit_sell	merc.h	/^    sh_int      profit_sell;            \/* Cost multiplier for selling  *\/$/;"	m	struct:shop_data
prompt	merc.h	/^    char *              prompt;$/;"	m	struct:pc_data
pulse	merc.h	/^    sh_int      pulse;  \/* how may pulses .25 sec until another call-out *\/$/;"	m	struct:auction_data
purge_days	board.h	/^        int purge_days; \/* Default expiration *\/$/;"	m	struct:board_data
pwd	merc.h	/^    char *              pwd;$/;"	m	struct:pc_data
quest_level_diff	quest.c	/^bool quest_level_diff(int clevel, int mlevel) {$/;"	f
quest_update	quest.c	/^void quest_update( void ) {$/;"	f
questgiver	merc.h	/^    CHAR_DATA *         questgiver;$/;"	m	struct:char_data
questmob	merc.h	/^    sh_int              questmob;$/;"	m	struct:char_data
questobj	merc.h	/^    sh_int              questobj;$/;"	m	struct:char_data
questpoints	merc.h	/^    int                 questpoints;$/;"	m	struct:char_data
quote_table	act_comm.c	/^const struct quote_type quote_table [MAX_QUOTES+1] = {$/;"	v
quote_type	act_comm.c	/^struct quote_type {$/;"	s	file:
race	merc.h	/^    sh_int              race;$/;"	m	struct:char_data
race	merc.h	/^    sh_int              race;$/;"	m	struct:mob_index_data
race_lookup	handler.c	/^int race_lookup (const char *name)$/;"	f
race_table	const.c	/^const   struct  race_type       race_table      []              =$/;"	v
race_type	merc.h	/^struct race_type$/;"	s
races	merc.h	/^    bool                races[MAX_PC_RACE];$/;"	m	struct:clan_data
rank	merc.h	/^    sh_int      rank;$/;"	m	struct:ban_data
rating	merc.h	/^    sh_int      rating[MAX_CLASS];      \/* How hard it is to learn      *\/      $/;"	m	struct:skill_type
rating	merc.h	/^    sh_int      rating[MAX_CLASS];$/;"	m	struct:group_type
raw_kill	fight.c	/^void raw_kill( CHAR_DATA *victim )$/;"	f
read_from_buffer	comm.c	/^void read_from_buffer( DESCRIPTOR_DATA *d, bool color )$/;"	f
read_from_descriptor	comm.c	/^bool read_from_descriptor( DESCRIPTOR_DATA *d, bool color )$/;"	f
read_level	board.h	/^        int read_level; \/* minimum level to see board *\/$/;"	m	struct:board_data
recall_room	merc.h	/^    ROOM_INDEX_DATA *   recall_room;$/;"	m	struct:pc_data
recursive_clone	act_wiz.c	/^void recursive_clone(CHAR_DATA *ch, OBJ_DATA *obj, OBJ_DATA *clone)$/;"	f
redit	olc.c	/^void redit( CHAR_DATA *ch, char *argument )$/;"	f
redit_table	olc.c	/^const struct olc_cmd_type redit_table[] =$/;"	v
regen_update	update.c	/^void regen_update( void )$/;"	f
remort_class	merc.h	/^    bool        remort_class;           \/* is a remort class            *\/$/;"	m	struct:class_type
remort_race	merc.h	/^    bool        remort_race;            \/* is a remort race *\/$/;"	m	struct:race_type
remove_obj	act_obj.c	/^bool remove_obj( CHAR_DATA *ch, int iWear, bool fReplace )$/;"	f
repeat	merc.h	/^    int                 repeat;$/;"	m	struct:descriptor_data
reply	merc.h	/^    CHAR_DATA *         reply;$/;"	m	struct:char_data
req_flags	merc.h	/^    long                req_flags;$/;"	m	struct:clan_data
res	merc.h	/^    long        res;                    \/* res bits for the race *\/$/;"	m	struct:race_type
res_flags	bit.c	/^const struct flag_type res_flags[] =$/;"	v
res_flags	merc.h	/^    long                res_flags;$/;"	m	struct:char_data
res_flags	merc.h	/^    long                res_flags;$/;"	m	struct:mob_index_data
reset_area	db.c	/^void reset_area( AREA_DATA *pArea )$/;"	f
reset_char	handler.c	/^void reset_char(CHAR_DATA *ch)$/;"	f
reset_data	merc.h	/^struct  reset_data$/;"	s
reset_first	merc.h	/^    RESET_DATA *        reset_first;$/;"	m	struct:area_data
reset_first	merc.h	/^   RESET_DATA          *reset_first;    \/* OLC *\/$/;"	m	struct:room_index_data
reset_free	mem.c	/^RESET_DATA              *       reset_free;$/;"	v
reset_last	merc.h	/^    RESET_DATA *        reset_last;$/;"	m	struct:area_data
reset_last	merc.h	/^   RESET_DATA          *reset_last;     \/* OLC *\/$/;"	m	struct:room_index_data
reset_num	merc.h	/^    sh_int              reset_num;$/;"	m	struct:obj_index_data
reset_room	db.c	/^void reset_room( ROOM_INDEX_DATA *pRoom )$/;"	f
rev_dir	act_move.c	/^const   sh_int  rev_dir         []              =$/;"	v
rgFreeList	db.c	/^void *                  rgFreeList      [MAX_MEM_LIST];$/;"	v
rgObjNest	save.c	/^static  OBJ_DATA *      rgObjNest       [MAX_NEST];$/;"	v	file:
rgSizeList	db.c	/^const int               rgSizeList      [MAX_MEM_LIST]  =$/;"	v
rgiState	db.c	/^static  int     rgiState[2+55];$/;"	v	file:
rolled	handle_con.c	/^bool rolled = FALSE;$/;"	v
room_flags	bit.c	/^const struct flag_type room_flags[] =$/;"	v
room_flags	merc.h	/^   int                  room_flags;$/;"	m	struct:room_index_data
room_index_data	merc.h	/^struct  room_index_data$/;"	s
room_index_free	mem.c	/^ROOM_INDEX_DATA         *       room_index_free;$/;"	v
room_index_hash	db.c	/^ROOM_INDEX_DATA *       room_index_hash         [MAX_KEY_HASH];$/;"	v
room_is_dark	handler.c	/^bool room_is_dark( ROOM_INDEX_DATA *pRoomIndex )$/;"	f
room_is_private	handler.c	/^bool room_is_private( ROOM_INDEX_DATA *pRoomIndex )$/;"	f
room_update	update.c	/^void room_update( void )$/;"	f
rs_flags	merc.h	/^    int                 rs_flags;       \/* OLC *\/$/;"	m	struct:exit_data
run_olc_editor	olc.c	/^bool run_olc_editor( DESCRIPTOR_DATA *d )$/;"	f
sAllocPerm	db.c	/^int                     sAllocPerm;$/;"	v
sAllocString	db.c	/^int                     sAllocString;$/;"	v
save_area	olc_save.c	/^void save_area( AREA_DATA *pArea )$/;"	f
save_area_list	olc_save.c	/^void save_area_list()$/;"	f
save_bans	ban.c	/^void save_bans(void)$/;"	f
save_board	board.c	/^static void save_board (BOARD_DATA *board)$/;"	f	file:
save_boards	board.c	/^void save_boards ()$/;"	f
save_char_obj	save.c	/^void save_char_obj( CHAR_DATA *ch )$/;"	f
save_clans	clans.c	/^void save_clans()                      $/;"	f
save_disabled	interp.c	/^void save_disabled( void )$/;"	f
save_door_resets	olc_save.c	/^void save_door_resets( FILE *fp, AREA_DATA *pArea )$/;"	f
save_mobile	olc_save.c	/^void save_mobile( FILE *fp, MOB_INDEX_DATA *pMobIndex )$/;"	f
save_mobiles	olc_save.c	/^void save_mobiles( FILE *fp, AREA_DATA *pArea )$/;"	f
save_number	update.c	/^int     save_number = 0;$/;"	v
save_object	olc_save.c	/^void save_object( FILE *fp, OBJ_INDEX_DATA *pObjIndex )$/;"	f
save_objects	olc_save.c	/^void save_objects( FILE *fp, AREA_DATA *pArea )$/;"	f
save_resets	olc_save.c	/^void save_resets( FILE *fp, AREA_DATA *pArea )$/;"	f
save_rooms	olc_save.c	/^void save_rooms( FILE *fp, AREA_DATA *pArea )$/;"	f
save_shops	olc_save.c	/^void save_shops( FILE *fp, AREA_DATA *pArea )$/;"	f
save_specials	olc_save.c	/^void save_specials( FILE *fp, AREA_DATA *pArea )$/;"	f
saves_dispel	magic.c	/^bool saves_dispel( int dis_level, int spell_level, int duration)$/;"	f
saves_spell	magic.c	/^bool saves_spell( int level, CHAR_DATA *victim, int dam_type )$/;"	f
saving_throw	merc.h	/^    sh_int              saving_throw;$/;"	m	struct:char_data
say_spell	magic.c	/^void say_spell( CHAR_DATA *ch, int sn ) {$/;"	f
second_one_hit	fight.c	/^void second_one_hit( CHAR_DATA *ch, CHAR_DATA *victim, int dt )$/;"	f
sector_flags	bit.c	/^const struct flag_type sector_flags[] =$/;"	v
sector_type	merc.h	/^   sh_int               sector_type;$/;"	m	struct:room_index_data
security	merc.h	/^    int                 security;       \/* OLC *\/ \/* Value 1-9  *\/$/;"	m	struct:area_data
security	merc.h	/^    int                 security;$/;"	m	struct:pc_data
seller	merc.h	/^    CHAR_DATA   * seller;       \/* pointer to the seller *\/$/;"	m	struct:auction_data
send_to_char	comm.c	/^void send_to_char( const char *txt, CHAR_DATA *ch )$/;"	f
send_to_desc	comm.c	/^void send_to_desc( char *txt, DESCRIPTOR_DATA *d )$/;"	f
sender	merc.h	/^    char *      sender;$/;"	m	struct:note_data
set_fighting	fight.c	/^void set_fighting( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
set_obj_values	olc_act.c	/^bool set_obj_values( CHAR_DATA *ch, OBJ_INDEX_DATA *pObj, int value_num, char *argument)$/;"	f
set_title	act_info.c	/^void set_title( CHAR_DATA *ch, char *title )$/;"	f
set_value	olc_act.c	/^bool set_value( CHAR_DATA *ch, OBJ_INDEX_DATA *pObj, char *argument, int value )$/;"	f
settable	merc.h	/^    bool settable;$/;"	m	struct:flag_type
sex	merc.h	/^    sh_int              sex;$/;"	m	struct:char_data
sex	merc.h	/^    sh_int              sex;$/;"	m	struct:mob_index_data
sex_flags	bit.c	/^const struct flag_type sex_flags[] =$/;"	v
sh_int	merc.h	/^typedef int                             sh_int;$/;"	t
sh_int	merc.h	/^typedef short   int                     sh_int;$/;"	t
shock	merc.h	/^    sh_int      shock;$/;"	m	struct:con_app_type
shock_effect	effects.c	/^void shock_effect(void *vo,int level, int dam, int target)$/;"	f
shop_data	merc.h	/^struct  shop_data$/;"	s
shop_first	db.c	/^SHOP_DATA *             shop_first;$/;"	v
shop_free	mem.c	/^SHOP_DATA               *       shop_free;$/;"	v
shop_last	db.c	/^SHOP_DATA *             shop_last;$/;"	v
short_descr	merc.h	/^    char *              short_descr;$/;"	m	struct:char_data
short_descr	merc.h	/^    char *              short_descr;$/;"	m	struct:mob_index_data
short_descr	merc.h	/^    char *              short_descr;$/;"	m	struct:obj_data
short_descr	merc.h	/^    char *              short_descr;$/;"	m	struct:obj_index_data
short_name	board.h	/^        char *short_name; \/* Max 8 chars *\/$/;"	m	struct:board_data
show	interp.h	/^    bool              show;$/;"	m	struct:cmd_type
show_char_to_char	act_info.c	/^void show_char_to_char( CHAR_DATA *list, CHAR_DATA *ch )$/;"	f
show_char_to_char_0	act_info.c	/^void show_char_to_char_0( CHAR_DATA *victim, CHAR_DATA *ch )$/;"	f
show_char_to_char_1	act_info.c	/^void show_char_to_char_1( CHAR_DATA *victim, CHAR_DATA *ch )$/;"	f
show_commands	olc.c	/^bool show_commands( CHAR_DATA *ch, char *argument )$/;"	f
show_dir_mobs	act_info.c	/^void show_dir_mobs(char *dir,int move_dir,CHAR_DATA *ch,int depth) {$/;"	f
show_flag_cmds	olc_act.c	/^void show_flag_cmds( CHAR_DATA *ch, const struct flag_type *flag_table )$/;"	f
show_help	olc_act.c	/^bool show_help( CHAR_DATA *ch, char *argument )$/;"	f
show_list_to_char	act_info.c	/^void show_list_to_char( OBJ_DATA *list, CHAR_DATA *ch, bool fShort, bool fShowNothing )$/;"	f
show_note_to_char	board.c	/^static void show_note_to_char (CHAR_DATA *ch, NOTE_DATA *note, int num)$/;"	f	file:
show_obj_values	olc_act.c	/^void show_obj_values( CHAR_DATA *ch, OBJ_INDEX_DATA *obj )$/;"	f
show_olc_cmds	olc.c	/^void show_olc_cmds( CHAR_DATA *ch, const struct olc_cmd_type *olc_table )$/;"	f
show_skill_cmds	olc_act.c	/^void show_skill_cmds( CHAR_DATA *ch, int tar )$/;"	f
show_spec_cmds	olc_act.c	/^void show_spec_cmds( CHAR_DATA *ch )$/;"	f
show_string	comm.c	/^void show_string(struct descriptor_data *d, char *input)$/;"	f
show_time	act_comm.c	/^void show_time( CHAR_DATA *ch ) {$/;"	f
show_version	olc_act.c	/^bool show_version( CHAR_DATA *ch, char *argument )$/;"	f
showstr_head	merc.h	/^    char *              showstr_head;$/;"	m	struct:descriptor_data
showstr_point	merc.h	/^    char *              showstr_point;$/;"	m	struct:descriptor_data
size	buffer.h	/^        int size;       \/* The allocated size of data *\/$/;"	m	struct:buffer_type
size	merc.h	/^    sh_int              size;$/;"	m	struct:char_data
size	merc.h	/^    sh_int              size;$/;"	m	struct:mob_index_data
size	merc.h	/^    sh_int      size;                   \/* aff bits for the race *\/$/;"	m	struct:pc_race_type
size_flags	bit.c	/^const struct flag_type size_flags[] =$/;"	v
skill_adept	merc.h	/^    sh_int      skill_adept;            \/* Maximum skill level          *\/$/;"	m	struct:class_type
skill_chosen	merc.h	/^    bool        skill_chosen[MAX_SKILL];$/;"	m	struct:gen_data
skill_level	merc.h	/^    sh_int      skill_level[MAX_CLASS]; \/* Level needed by class        *\/$/;"	m	struct:skill_type
skill_lookup	magic.c	/^int skill_lookup( const char *name ) {$/;"	f
skill_table	const.c	/^const   struct  skill_type      skill_table     [MAX_SKILL]     =$/;"	v
skill_type	merc.h	/^struct  skill_type$/;"	s
skills	merc.h	/^    char *      skills[5];              \/* bonus skills for the race *\/$/;"	m	struct:pc_race_type
skip_section	db.c	/^void skip_section( FILE *fp, char *section )$/;"	f
sky	merc.h	/^    int         sky;$/;"	m	struct:weather_data
slot	merc.h	/^    sh_int      slot;                   \/* Slot for #OBJECT loading     *\/$/;"	m	struct:skill_type
slot_lookup	magic.c	/^int slot_lookup( int slot ) {$/;"	f
smash_tilde	db.c	/^void smash_tilde( char *str )$/;"	f
snoop_by	merc.h	/^    DESCRIPTOR_DATA *   snoop_by;$/;"	m	struct:descriptor_data
social_count	db.c	/^int                                             social_count            = 0;$/;"	v
social_table	db.c	/^struct                                  social_type     social_table            [MAX_SOCIALS];$/;"	v
social_type	merc.h	/^struct  social_type$/;"	s
song_data	music.h	/^struct song_data$/;"	s
song_table	music.c	/^struct song_data song_table[MAX_SONGS];$/;"	v
song_update	music.c	/^void song_update(void)$/;"	f
spec_assassin	special.c	/^bool spec_assassin( CHAR_DATA *ch )$/;"	f
spec_breath_acid	special.c	/^bool spec_breath_acid( CHAR_DATA *ch )$/;"	f
spec_breath_any	special.c	/^bool spec_breath_any( CHAR_DATA *ch )$/;"	f
spec_breath_fire	special.c	/^bool spec_breath_fire( CHAR_DATA *ch )$/;"	f
spec_breath_frost	special.c	/^bool spec_breath_frost( CHAR_DATA *ch )$/;"	f
spec_breath_gas	special.c	/^bool spec_breath_gas( CHAR_DATA *ch )$/;"	f
spec_breath_lightning	special.c	/^bool spec_breath_lightning( CHAR_DATA *ch )$/;"	f
spec_cast_adept	special.c	/^bool spec_cast_adept( CHAR_DATA *ch )$/;"	f
spec_cast_cleric	special.c	/^bool spec_cast_cleric( CHAR_DATA *ch )$/;"	f
spec_cast_judge	special.c	/^bool spec_cast_judge( CHAR_DATA *ch )$/;"	f
spec_cast_mage	special.c	/^bool spec_cast_mage( CHAR_DATA *ch )$/;"	f
spec_cast_undead	special.c	/^bool spec_cast_undead( CHAR_DATA *ch )$/;"	f
spec_clan_guard	special.c	/^bool spec_clan_guard( CHAR_DATA *ch )$/;"	f
spec_engraver	special.c	/^bool spec_engraver( CHAR_DATA *ch )$/;"	f
spec_executioner	special.c	/^bool spec_executioner( CHAR_DATA *ch )$/;"	f
spec_fido	special.c	/^bool spec_fido( CHAR_DATA *ch )$/;"	f
spec_flower_shop	special.c	/^bool spec_flower_shop( CHAR_DATA *ch )$/;"	f
spec_fun	merc.h	/^    SPEC_FUN *          spec_fun;$/;"	m	struct:char_data
spec_fun	merc.h	/^    SPEC_FUN *          spec_fun;$/;"	m	struct:mob_index_data
spec_fun	merc.h	/^    SPEC_FUN *  spec_fun;$/;"	m	struct:spec_type
spec_gamemaster	special.c	/^bool spec_gamemaster( CHAR_DATA *ch )$/;"	f
spec_guard	special.c	/^bool spec_guard( CHAR_DATA *ch )$/;"	f
spec_janitor	special.c	/^bool spec_janitor( CHAR_DATA *ch )$/;"	f
spec_lookup	special.c	/^SPEC_FUN *spec_lookup( const char *name )       \/* OLC *\/$/;"	f
spec_mayor	special.c	/^bool spec_mayor( CHAR_DATA *ch )$/;"	f
spec_name	merc.h	/^    char *      spec_name;$/;"	m	struct:spec_type
spec_poison	special.c	/^bool spec_poison( CHAR_DATA *ch )$/;"	f
spec_puff	special.c	/^bool spec_puff( CHAR_DATA *ch )$/;"	f
spec_questmaster	special.c	/^bool spec_questmaster( CHAR_DATA *ch )$/;"	f
spec_string	special.c	/^char *spec_string( SPEC_FUN *fun )      \/* OLC *\/$/;"	f
spec_table	special.c	/^const   struct  spec_type       spec_table      [ ] =$/;"	v
spec_thief	special.c	/^bool spec_thief( CHAR_DATA *ch )$/;"	f
spec_type	merc.h	/^struct spec_type$/;"	s
spell_armor	magic.c	/^void spell_armor( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_bless	magic.c	/^void spell_bless( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_blindness	magic.c	/^void spell_blindness( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_blink	magic.c	/^void spell_blink( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_call_lightning	magic.c	/^void spell_call_lightning( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_calm	magic.c	/^void spell_calm( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_cancellation	magic.c	/^void spell_cancellation( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_chain_lightning	magic.c	/^void spell_chain_lightning(int sn, int level, CHAR_DATA *ch, void *vo,$/;"	f
spell_change_sex	magic.c	/^void spell_change_sex( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_charm_person	magic.c	/^void spell_charm_person( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_chill_touch	magic.c	/^void spell_chill_touch( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_continual_light	magic.c	/^void spell_continual_light( int sn, int level, CHAR_DATA *ch, void *vo,$/;"	f
spell_control_weather	magic.c	/^void spell_control_weather( int sn, int level, CHAR_DATA *ch, void *vo,$/;"	f
spell_create_food	magic.c	/^void spell_create_food( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_create_rose	magic.c	/^void spell_create_rose( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_create_spring	magic.c	/^void spell_create_spring( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_create_water	magic.c	/^void spell_create_water( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_cure_blindness	magic.c	/^void spell_cure_blindness( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_cure_disease	magic.c	/^void spell_cure_disease( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_cure_poison	magic.c	/^void spell_cure_poison( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_curse	magic.c	/^void spell_curse( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_demonfire	magic.c	/^void spell_demonfire(int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_detect_evil	magic.c	/^void spell_detect_evil( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_detect_good	magic.c	/^void spell_detect_good( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_detect_hidden	magic.c	/^void spell_detect_hidden( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_detect_invis	magic.c	/^void spell_detect_invis( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_detect_magic	magic.c	/^void spell_detect_magic( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_detect_poison	magic.c	/^void spell_detect_poison( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_disintegrate	magic.c	/^void spell_disintegrate( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_dispel_evil	magic.c	/^void spell_dispel_evil( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_dispel_good	magic.c	/^void spell_dispel_good( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_dispel_magic	magic.c	/^void spell_dispel_magic( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_earthquake	magic.c	/^void spell_earthquake( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_enchant_armor	magic.c	/^void spell_enchant_armor( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_enchant_weapon	magic.c	/^void spell_enchant_weapon( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_energy_drain	magic.c	/^void spell_energy_drain( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_faerie_fire	magic.c	/^void spell_faerie_fire( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_faerie_fog	magic.c	/^void spell_faerie_fog( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_fear	magic.c	/^void spell_fear( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_fireball	magic.c	/^void spell_fireball( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_fireproof	magic.c	/^void spell_fireproof( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_flame_sword	magic.c	/^void spell_flame_sword( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_fly	magic.c	/^void spell_fly( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_frenzy	magic.c	/^void spell_frenzy(int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_fun	merc.h	/^    SPELL_FUN * spell_fun;              \/* Spell pointer (for spells)   *\/$/;"	m	struct:skill_type
spell_gate	magic.c	/^void spell_gate( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_giant_strength	magic.c	/^void spell_giant_strength( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_harm	magic.c	/^void spell_harm( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_haste	magic.c	/^void spell_haste( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_heal	magic.c	/^void spell_heal( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_heat_metal	magic.c	/^void spell_heat_metal( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_holy_word	magic.c	/^void spell_holy_word(int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_identify	magic.c	/^void spell_identify( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_imprint	magic.c	/^void spell_imprint( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_infravision	magic.c	/^void spell_infravision( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_invis	magic.c	/^void spell_invis( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_know_alignment	magic.c	/^void spell_know_alignment( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_lightning_bolt	magic.c	/^void spell_lightning_bolt( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_locate_object	magic.c	/^void spell_locate_object( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_magic_missile	magic.c	/^void spell_magic_missile( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_mass_healing	magic.c	/^void spell_mass_healing(int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_mass_invis	magic.c	/^void spell_mass_invis( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_nexus	magic.c	/^void spell_nexus( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_null	magic.c	/^void spell_null( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_pass_door	magic.c	/^void spell_pass_door( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_plague	magic.c	/^void spell_plague( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_poison	magic.c	/^void spell_poison( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_portal	magic.c	/^void spell_portal( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_protection_evil	magic.c	/^void spell_protection_evil( int sn, int level, CHAR_DATA *ch, void *vo,$/;"	f
spell_protection_good	magic.c	/^void spell_protection_good( int sn, int level, CHAR_DATA *ch, void *vo,$/;"	f
spell_ray_of_truth	magic.c	/^void spell_ray_of_truth (int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_recharge	magic.c	/^void spell_recharge( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_refresh	magic.c	/^void spell_refresh( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_regeneration	magic.c	/^void spell_regeneration( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_remove_curse	magic.c	/^void spell_remove_curse( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_resurrect	magic.c	/^void spell_resurrect( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_sanctuary	magic.c	/^void spell_sanctuary( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_shield	magic.c	/^void spell_shield( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_sleep	magic.c	/^void spell_sleep( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_slow	magic.c	/^void spell_slow( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_stone_skin	magic.c	/^void spell_stone_skin( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_summon	magic.c	/^void spell_summon( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_teleport	magic.c	/^void spell_teleport( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_ventriloquate	magic.c	/^void spell_ventriloquate( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spell_vision	magic.c	/^void spell_vision( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_weaken	magic.c	/^void spell_weaken( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_web	magic.c	/^void spell_web( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_word_of_recall	magic.c	/^void spell_word_of_recall( int sn, int level, CHAR_DATA *ch, void *vo, int$/;"	f
spells	merc.h	/^    char *      spells[MAX_IN_GROUP];$/;"	m	struct:group_type
spouse	merc.h	/^    char *              spouse;$/;"	m	struct:pc_data
start_pos	merc.h	/^    sh_int              start_pos;$/;"	m	struct:char_data
start_pos	merc.h	/^    sh_int              start_pos;$/;"	m	struct:mob_index_data
stat	bit.c	/^    bool stat;$/;"	m	struct:flag_stat_type
stat1	handle_con.c	/^int stat1[5],stat2[5],stat3[5],stat4[5],stat5[5];$/;"	v
stat2	handle_con.c	/^int stat1[5],stat2[5],stat3[5],stat4[5],stat5[5];$/;"	v
stat3	handle_con.c	/^int stat1[5],stat2[5],stat3[5],stat4[5],stat5[5];$/;"	v
stat4	handle_con.c	/^int stat1[5],stat2[5],stat3[5],stat4[5],stat5[5];$/;"	v
stat5	handle_con.c	/^int stat1[5],stat2[5],stat3[5],stat4[5],stat5[5];$/;"	v
statdiff	act_info.c	/^char *statdiff(int normal, int modified)$/;"	f
stats	merc.h	/^    sh_int      stats[MAX_STATS];       \/* starting stats *\/$/;"	m	struct:pc_race_type
status	merc.h	/^   int                  status;$/;"	m	struct:room_index_data
stop_fighting	fight.c	/^void stop_fighting( CHAR_DATA *ch, bool fBoth )$/;"	f
stop_follower	act_comm.c	/^void stop_follower( CHAR_DATA *ch ) {$/;"	f
stop_idling	comm.c	/^void stop_idling( CHAR_DATA *ch )$/;"	f
strArea	db.c	/^char                    strArea[MAX_INPUT_LENGTH];$/;"	v
str_app	const.c	/^const   struct  str_app_type    str_app         [26]            =$/;"	v
str_app_type	merc.h	/^struct  str_app_type$/;"	s
str_boot_time	comm.c	/^char                str_boot_time[MAX_INPUT_LENGTH];$/;"	v
str_cmp	db.c	/^bool str_cmp( const char *astr, const char *bstr )$/;"	f
str_dup	db.c	/^char *str_dup( const char *str )$/;"	f
str_empty	db.c	/^char                    str_empty       [1];$/;"	v
str_infix	db.c	/^bool str_infix( const char *astr, const char *bstr )$/;"	f
str_prefix	db.c	/^bool str_prefix( const char *astr, const char *bstr )$/;"	f
str_suffix	db.c	/^bool str_suffix( const char *astr, const char *bstr )$/;"	f
string_add	string.c	/^void string_add( CHAR_DATA *ch, char *argument )$/;"	f
string_append	string.c	/^void string_append( CHAR_DATA *ch, char **pString )$/;"	f
string_edit	string.c	/^void string_edit( CHAR_DATA *ch, char **pString )$/;"	f
string_hash	db.c	/^char *                  string_hash             [MAX_KEY_HASH];$/;"	v
string_proper	string.c	/^char * string_proper( char * argument )$/;"	f
string_replace	string.c	/^char * string_replace( char * orig, char * old, char * newstr )$/;"	f
string_space	db.c	/^char *                  string_space;$/;"	v
string_unpad	string.c	/^char * string_unpad( char * argument )$/;"	f
structure	bit.c	/^    const struct flag_type *structure;$/;"	m	struct:flag_stat_type
structure	olc_act.c	/^    const void *structure;$/;"	m	struct:olc_help_type
subject	merc.h	/^    char *      subject;$/;"	m	struct:note_data
substitute_alias	alias.c	/^void substitute_alias(DESCRIPTOR_DATA *d, char *argument)$/;"	f
sunlight	merc.h	/^    int         sunlight;$/;"	m	struct:weather_data
szFinishPrompt	board.c	/^const char * szFinishPrompt = "( `WC`w )ontinue, ( `WV`w )iew, ( `WP`w )ost or (`W F`w )orget it?";$/;"	v
tail_chain	db.c	/^void tail_chain( void )$/;"	f
talk_auction	act_comm.c	/^void talk_auction( char *argument ) {$/;"	f
target	merc.h	/^    sh_int      target;                 \/* Legal targets                *\/$/;"	m	struct:skill_type
target_aid	mob_cast.c	/^CHAR_DATA *target_aid(CHAR_DATA *ch)$/;"	f
target_harm	mob_cast.c	/^CHAR_DATA *target_harm(CHAR_DATA *ch)$/;"	f
target_name	magic.c	/^char *target_name;$/;"	v
text	act_comm.c	/^    char *text;$/;"	m	struct:quote_type
text	merc.h	/^    char *      text;$/;"	m	struct:help_data
text	merc.h	/^    char *      text;$/;"	m	struct:note_data
thac0_00	merc.h	/^    sh_int      thac0_00;               \/* Thac0 for level  0           *\/$/;"	m	struct:class_type
thac0_32	merc.h	/^    sh_int      thac0_32;               \/* Thac0 for level 32           *\/$/;"	m	struct:class_type
thedate	handler.c	/^char thedate[12];$/;"	v
thetime	handler.c	/^char thetime[7];$/;"	v
time_info	db.c	/^TIME_INFO_DATA          time_info;$/;"	v
time_info_data	merc.h	/^struct  time_info_data$/;"	s
timer	merc.h	/^    sh_int              timer;$/;"	m	struct:char_data
timer	merc.h	/^    sh_int              timer;$/;"	m	struct:obj_data
timer	merc.h	/^   int                  timer;$/;"	m	struct:room_index_data
title	merc.h	/^    char *              title;$/;"	m	struct:pc_data
to_list	merc.h	/^    char *      to_list;$/;"	m	struct:note_data
to_room	merc.h	/^        ROOM_INDEX_DATA *       to_room;$/;"	m	union:exit_data::<anonymous>
todam	merc.h	/^    sh_int      todam;$/;"	m	struct:str_app_type
tohit	merc.h	/^    sh_int      tohit;$/;"	m	struct:str_app_type
top_affect	db.c	/^int                     top_affect;$/;"	v
top_area	db.c	/^int                     top_area;$/;"	v
top_clan	db.c	/^int                     top_clan;$/;"	v
top_ed	db.c	/^int                     top_ed;$/;"	v
top_exit	db.c	/^int                     top_exit;$/;"	v
top_help	db.c	/^int                     top_help;$/;"	v
top_mob_index	db.c	/^int                     top_mob_index;$/;"	v
top_obj_index	db.c	/^int                     top_obj_index;$/;"	v
top_reset	db.c	/^int                     top_reset;$/;"	v
top_room	db.c	/^int                     top_room;$/;"	v
top_shop	db.c	/^int                     top_shop;$/;"	v
top_string	db.c	/^char *                  top_string;$/;"	v
top_vnum_mob	db.c	/^int                     top_vnum_mob;   \/* OLC *\/$/;"	v
top_vnum_obj	db.c	/^int                     top_vnum_obj;   \/* OLC *\/$/;"	v
top_vnum_room	db.c	/^int                     top_vnum_room;  \/* OLC *\/$/;"	v
train	merc.h	/^    sh_int              train;$/;"	m	struct:char_data
true_sex	merc.h	/^    sh_int              true_sex;$/;"	m	struct:pc_data
type	merc.h	/^    sh_int              type;$/;"	m	struct:affect_data
type	merc.h	/^    sh_int type;$/;"	m	struct:weapon_type
type_flags	bit.c	/^const struct flag_type type_flags[] =$/;"	v
u1	merc.h	/^    } u1;$/;"	m	struct:exit_data
unequip_char	handler.c	/^void unequip_char( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
unix	merc.h	62;"	d
unlink_note	board.c	/^static void unlink_note (BOARD_DATA *board, NOTE_DATA *note)$/;"	f	file:
unread_notes	board.c	/^int unread_notes (CHAR_DATA *ch, BOARD_DATA *board)$/;"	f
update_handler	update.c	/^void update_handler( void )$/;"	f
update_pos	fight.c	/^void update_pos( CHAR_DATA *victim )$/;"	f
uvnum	merc.h	/^    int                 uvnum;          \/* OLC *\/ \/* Upper vnum *\/$/;"	m	struct:area_data
valid	merc.h	/^    bool        valid;$/;"	m	struct:ban_data
value	merc.h	/^    int                 value   [5];$/;"	m	struct:obj_data
value	merc.h	/^    int                 value[5];$/;"	m	struct:obj_index_data
version	merc.h	/^    sh_int              version;$/;"	m	struct:char_data
vict_found	merc.h	/^    char *    vict_found;$/;"	m	struct:social_type
violence_update	fight.c	/^void violence_update( void ) {$/;"	f
vis_clan	clans.c	/^char * vis_clan(int clan)$/;"	f
visible	merc.h	/^    char *              visible;$/;"	m	struct:clan_data
vnum	merc.h	/^        sh_int                  vnum;$/;"	m	union:exit_data::<anonymous>
vnum	merc.h	/^    int                 vnum;           \/* OLC *\/ \/* Area vnum  *\/$/;"	m	struct:area_data
vnum	merc.h	/^    sh_int              vnum;$/;"	m	struct:mob_index_data
vnum	merc.h	/^    sh_int              vnum;$/;"	m	struct:obj_index_data
vnum	merc.h	/^    sh_int vnum;$/;"	m	struct:weapon_type
vnum	merc.h	/^   sh_int               vnum;$/;"	m	struct:room_index_data
vuln	merc.h	/^    long        vuln;                   \/* vuln bits for the race *\/$/;"	m	struct:race_type
vuln_flags	bit.c	/^const struct flag_type vuln_flags[] =$/;"	v
vuln_flags	merc.h	/^    long                vuln_flags;$/;"	m	struct:char_data
vuln_flags	merc.h	/^    long                vuln_flags;$/;"	m	struct:mob_index_data
wait	merc.h	/^    sh_int              wait;$/;"	m	struct:char_data
was_in_room	merc.h	/^    ROOM_INDEX_DATA *   was_in_room;$/;"	m	struct:char_data
weapon	merc.h	/^    sh_int      weapon;                 \/* First weapon                 *\/$/;"	m	struct:class_type
weapon_bit_name	handler.c	/^char *weapon_bit_name(int weapon_flags)$/;"	f
weapon_class	bit.c	/^const struct flag_type weapon_class[] =$/;"	v
weapon_flags	bit.c	/^const struct flag_type weapon_flags[] =$/;"	v
weapon_lookup	handler.c	/^int weapon_lookup ( const char *name )$/;"	f
weapon_table	const.c	/^const struct weapon_type weapon_table [] =$/;"	v
weapon_type	bit.c	/^const struct flag_type weapon_type[] =$/;"	v
weapon_type	merc.h	/^struct weapon_type$/;"	s
wear_bit	olc_act.c	/^    int wear_bit;$/;"	m	struct:wear_type
wear_bit	olc_act.c	/^int wear_bit(int loc)$/;"	f
wear_bit_name	handler.c	/^char *wear_bit_name(int wear_flags)$/;"	f
wear_flags	bit.c	/^const struct flag_type wear_flags[] =$/;"	v
wear_flags	merc.h	/^    sh_int              wear_flags;$/;"	m	struct:obj_data
wear_flags	merc.h	/^    sh_int              wear_flags;$/;"	m	struct:obj_index_data
wear_loc	merc.h	/^    sh_int              wear_loc;$/;"	m	struct:obj_data
wear_loc	olc_act.c	/^    int wear_loc;$/;"	m	struct:wear_type
wear_loc	olc_act.c	/^int wear_loc(int bits, int count)$/;"	f
wear_loc_flags	bit.c	/^const struct flag_type wear_loc_flags[] =$/;"	v
wear_loc_strings	bit.c	/^const struct flag_type wear_loc_strings[] =$/;"	v
wear_obj	act_obj.c	/^void wear_obj( CHAR_DATA *ch, OBJ_DATA *obj, bool fReplace )$/;"	f
wear_table	olc_act.c	/^const struct wear_type wear_table[] =$/;"	v
wear_type	olc_act.c	/^struct wear_type$/;"	s	file:
weather_data	merc.h	/^struct  weather_data$/;"	s
weather_info	db.c	/^WEATHER_DATA            weather_info;$/;"	v
weather_update	update.c	/^void weather_update( void )$/;"	f
weight	merc.h	/^    sh_int              weight;$/;"	m	struct:obj_data
weight	merc.h	/^    sh_int              weight;$/;"	m	struct:obj_index_data
where	merc.h	/^    sh_int              where;$/;"	m	struct:affect_data
where_name	act_info.c	/^char *  const   where_name      [] =$/;"	v
who_name	merc.h	/^    char        who_name        [4];    \/* Three-letter name for 'who'  *\/$/;"	m	struct:class_type
who_name	merc.h	/^    char        who_name[6];$/;"	m	struct:pc_race_type
wield	merc.h	/^    sh_int      wield;$/;"	m	struct:str_app_type
wimpy	merc.h	/^    sh_int              wimpy;$/;"	m	struct:char_data
win	dice_games.c	/^void win( CHAR_DATA *ch, long amnt )$/;"	f
wis_app	const.c	/^const   struct  wis_app_type    wis_app         [26]            =$/;"	v
wis_app_type	merc.h	/^struct  wis_app_type$/;"	s
wizlock	comm.c	/^bool                wizlock;            \/* Game is wizlocked            *\/$/;"	v
wiznet	act_wiz.c	/^void wiznet( char *string, CHAR_DATA *ch, OBJ_DATA *obj, long flag, long$/;"	f
wiznet	merc.h	/^    long                wiznet; \/* wiznet stuff - added by Rahl *\/$/;"	m	struct:char_data
wiznet_lookup	handler.c	/^long wiznet_lookup( const char *name )$/;"	f
wiznet_table	const.c	/^const   struct  wiznet_type     wiznet_table    []              =$/;"	v
wiznet_type	merc.h	/^struct wiznet_type$/;"	s
write_level	board.h	/^        int write_level;\/* minimum level to post notes *\/$/;"	m	struct:board_data
write_to_buffer	comm.c	/^ void write_to_buffer( DESCRIPTOR_DATA *d, const char *txt, int length )$/;"	f
write_to_descriptor	comm.c	/^bool write_to_descriptor( int desc, char *txt, int length , bool color)$/;"	f
xp_compute	fight.c	/^int xp_compute( CHAR_DATA *gch, CHAR_DATA *victim, int total_levels, int members )$/;"	f
xp_level	merc.h	/^	int 				xp_level;$/;"	m	struct:char_data
year	merc.h	/^    int         year;$/;"	m	struct:time_info_data
zone	merc.h	/^    AREA_DATA *         zone;$/;"	m	struct:char_data
